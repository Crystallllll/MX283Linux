.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BUSYBOX 1"
.TH BUSYBOX 1 "2017-11-11" "version 1.27.2" "busybox"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
BusyBox \- The Swiss Army Knife of Embedded Linux
.SH "SYNTAX"
.IX Header "SYNTAX"
.Vb 1
\& busybox <applet> [arguments...]  # or
\&
\& <applet> [arguments...]          # if symlinked
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
BusyBox combines tiny versions of many common \s-1UNIX\s0 utilities into a single
small executable. It provides minimalist replacements for most of the utilities
you usually find in \s-1GNU\s0 coreutils, util-linux, etc. The utilities in BusyBox
generally have fewer options than their full-featured \s-1GNU\s0 cousins; however, the
options that are included provide the expected functionality and behave very
much like their \s-1GNU\s0 counterparts.
.PP
BusyBox has been written with size-optimization and limited resources in mind.
It is also extremely modular so you can easily include or exclude commands (or
features) at compile time. This makes it easy to customize your embedded
systems. To create a working system, just add /dev, /etc, and a Linux kernel.
BusyBox provides a fairly complete \s-1POSIX\s0 environment for any small or embedded
system.
.PP
BusyBox is extremely configurable.  This allows you to include only the
components you need, thereby reducing binary size. Run 'make config' or 'make
menuconfig' to select the functionality that you wish to enable.  Then run
\&'make' to compile BusyBox using your configuration.
.PP
After the compile has finished, you should use 'make install' to install
BusyBox. This will install the 'bin/busybox' binary, in the target directory
specified by \s-1CONFIG_PREFIX. CONFIG_PREFIX\s0 can be set when configuring BusyBox,
or you can specify an alternative location at install time (i.e., with a
command line like 'make CONFIG_PREFIX=/tmp/foo install'). If you enabled
any applet installation scheme (either as symlinks or hardlinks), these will
also be installed in the location pointed to by \s-1CONFIG_PREFIX.\s0
.SH "USAGE"
.IX Header "USAGE"
BusyBox is a multi-call binary.  A multi-call binary is an executable program
that performs the same job as more than one utility program.  That means there
is just a single BusyBox binary, but that single binary acts like a large
number of utilities.  This allows BusyBox to be smaller since all the built-in
utility programs (we call them applets) can share code for many common
operations.
.PP
You can also invoke BusyBox by issuing a command as an argument on the
command line.  For example, entering
.PP
.Vb 1
\&        /bin/busybox ls
.Ve
.PP
will also cause BusyBox to behave as 'ls'.
.PP
Of course, adding '/bin/busybox' into every command would be painful.  So most
people will invoke BusyBox using links to the BusyBox binary.
.PP
For example, entering
.PP
.Vb 2
\&        ln \-s /bin/busybox ls
\&        ./ls
.Ve
.PP
will cause BusyBox to behave as 'ls' (if the 'ls' command has been compiled
into BusyBox).  Generally speaking, you should never need to make all these
links yourself, as the BusyBox build system will do this for you when you run
the 'make install' command.
.PP
If you invoke BusyBox with no arguments, it will provide you with a list of the
applets that have been compiled into your BusyBox binary.
.SH "COMMON OPTIONS"
.IX Header "COMMON OPTIONS"
Most BusyBox applets support the \fB\-\-help\fR argument to provide a terse runtime
description of their behavior.  If the \s-1CONFIG_FEATURE_VERBOSE_USAGE\s0 option has
been enabled, more detailed usage information will also be available.
.SH "COMMANDS"
.IX Header "COMMANDS"
Currently available applets include:
.PP
.Vb 10
\&        adjtimex, arp, arping, ash, awk, base64, basename, beep, blkdiscard,
\&        blkid, blockdev, cal, chat, chrt, chvt, clear, cmp, conspy, cp,
\&        crond, crontab, cttyhack, cut, date, dc, dd, depmod, devmem, df,
\&        dhcprelay, diff, dirname, dmesg, dnsdomainname, dumpleases, echo,
\&        env, expand, expr, factor, fakeidentd, fallocate, false, fatattr,
\&        fdflush, fdformat, find, findfs, flock, fold, free, freeramdisk,
\&        fsck.minix, fsfreeze, fstrim, fsync, getopt, getty, grep, groups,
\&        hd, head, hexdump, hostid, hostname, hwclock, i2cdetect, i2cdump,
\&        i2cget, i2cset, id, ifconfig, ifdown, ifplugd, ifup, inetd, init,
\&        insmod, install, ionice, ip, ipaddr, ipcalc, ipcrm, ipcs, iplink,
\&        ipneigh, iproute, iprule, iptunnel, kill, klogd, less, link,
\&        linuxrc, ln, logger, login, logname, logread, losetup, ls, lsmod,
\&        lspci, lsscsi, lsusb, makedevs, mdev, mesg, mkdir, mkdosfs, mke2fs,
\&        mkfifo, mkfs.ext2, mkfs.minix, mkfs.vfat, mknod, mkswap, mktemp,
\&        modinfo, modprobe, more, mount, mountpoint, mt, mv, nameif,
\&        nanddump, nandwrite, nbd\-client, nc, netstat, nice, nl, nohup,
\&        nproc, nsenter, nslookup, ntpd, od, partprobe, paste, ping,
\&        pivot_root, poweroff, printenv, printf, ps, pscan, pwd, raidautorun,
\&        rdate, rdev, readahead, readlink, readprofile, realpath, reboot,
\&        renice, rev, rm, rmdir, rmmod, route, rtcwake, rx, script,
\&        scriptreplay, sed, seq, setpriv, setserial, setsid, sh, shred, shuf,
\&        slattach, sleep, sort, split, ssl_client, stat, strings, stty, sum,
\&        switch_root, sync, syslogd, tac, tail, taskset, tcpsvd, tee, telnet,
\&        telnetd, tftp, tftpd, time, timeout, top, touch, tr, traceroute,
\&        true, truncate, tty, ttysize, tunctl, ubiattach, ubidetach,
\&        ubimkvol, ubirename, ubirmvol, ubirsvol, ubiupdatevol, udhcpc,
\&        udhcpd, udpsvd, uevent, umount, uname, unexpand, uniq, unlink,
\&        unshare, uptime, usleep, uudecode, uuencode, vconfig, vi, volname,
\&        watchdog, wc, xxd, zcip
.Ve
.SH "COMMAND DESCRIPTIONS"
.IX Header "COMMAND DESCRIPTIONS"
.IP "\fBadjtimex\fR" 4
.IX Item "adjtimex"
adjtimex [\-q] [\-o \s-1OFF\s0] [\-f \s-1FREQ\s0] [\-p \s-1TCONST\s0] [\-t \s-1TICK\s0]
.Sp
Read or set kernel time variables. See \fIadjtimex\fR\|(2)
.Sp
.Vb 6
\&        \-q      Quiet
\&        \-o OFF  Time offset, microseconds
\&        \-f FREQ Frequency adjust, integer kernel units (65536 is 1ppm)
\&        \-t TICK Microseconds per tick, usually 10000
\&                (positive \-t or \-f values make clock run faster)
\&        \-p TCONST
.Ve
.IP "\fBarp\fR" 4
.IX Item "arp"
arp 
[\-vn]	[\-H \s-1HWTYPE\s0] [\-i \s-1IF\s0] \-a [\s-1HOSTNAME\s0]
[\-v]		    [\-i \s-1IF\s0] \-d \s-1HOSTNAME\s0 [pub]
[\-v]	[\-H \s-1HWTYPE\s0] [\-i \s-1IF\s0] \-s \s-1HOSTNAME HWADDR\s0 [temp]
[\-v]	[\-H \s-1HWTYPE\s0] [\-i \s-1IF\s0] \-s \s-1HOSTNAME HWADDR\s0 [netmask \s-1MASK\s0] pub
[\-v]	[\-H \s-1HWTYPE\s0] [\-i \s-1IF\s0] \-Ds \s-1HOSTNAME IFACE\s0 [netmask \s-1MASK\s0] pub
.Sp
Manipulate \s-1ARP\s0 cache
.Sp
.Vb 9
\&        \-a              Display (all) hosts
\&        \-d              Delete ARP entry
\&        \-s              Set new entry
\&        \-v              Verbose
\&        \-n              Don\*(Aqt resolve names
\&        \-i IF           Network interface
\&        \-D              Read HWADDR from IFACE
\&        \-A,\-p AF        Protocol family
\&        \-H HWTYPE       Hardware address type
.Ve
.IP "\fBarping\fR" 4
.IX Item "arping"
arping [\-fqbDUA] [\-c \s-1CNT\s0] [\-w \s-1TIMEOUT\s0] [\-I \s-1IFACE\s0] [\-s \s-1SRC_IP\s0] \s-1DST_IP\s0
.Sp
Send \s-1ARP\s0 requests/replies
.Sp
.Vb 11
\&        \-f              Quit on first ARP reply
\&        \-q              Quiet
\&        \-b              Keep broadcasting, don\*(Aqt go unicast
\&        \-D              Exit with 1 if DST_IP replies
\&        \-U              Unsolicited ARP mode, update your neighbors
\&        \-A              ARP answer mode, update your neighbors
\&        \-c N            Stop after sending N ARP requests
\&        \-w TIMEOUT      Seconds to wait for ARP reply
\&        \-I IFACE        Interface to use (default eth0)
\&        \-s SRC_IP       Sender IP address
\&        DST_IP          Target IP address
.Ve
.IP "\fBash\fR" 4
.IX Item "ash"
ash [\-/+OPTIONS] [\-/+o \s-1OPT\s0]... [\-c '\s-1SCRIPT\s0' [\s-1ARG0\s0 [\s-1ARGS\s0]] / \s-1FILE\s0 [\s-1ARGS\s0]]
.Sp
Unix shell interpreter
.IP "\fBawk\fR" 4
.IX Item "awk"
awk [\s-1OPTIONS\s0] [\s-1AWK_PROGRAM\s0] [\s-1FILE\s0]...
.Sp
.Vb 4
\&        \-v VAR=VAL      Set variable
\&        \-F SEP          Use SEP as field separator
\&        \-f FILE         Read program from FILE
\&        \-e AWK_PROGRAM
.Ve
.IP "\fBbase64\fR" 4
.IX Item "base64"
base64 [\-d] [\s-1FILE\s0]
.Sp
Base64 encode or decode \s-1FILE\s0 to standard output
	\-d	Decode data
.IP "\fBbasename\fR" 4
.IX Item "basename"
basename \s-1FILE\s0 [\s-1SUFFIX\s0]
.Sp
Strip directory path and .SUFFIX from \s-1FILE\s0
.IP "\fBbeep\fR" 4
.IX Item "beep"
beep \-f \s-1FREQ\s0 \-l \s-1LEN\s0 \-d \s-1DELAY\s0 \-r \s-1COUNT\s0 \-n
.Sp
.Vb 5
\&        \-f      Frequency in Hz
\&        \-l      Length in ms
\&        \-d      Delay in ms
\&        \-r      Repetitions
\&        \-n      Start new tone
.Ve
.IP "\fBblkdiscard\fR" 4
.IX Item "blkdiscard"
blkdiscard [\-o \s-1OFS\s0] [\-l \s-1LEN\s0] [\-s] \s-1DEVICE\s0
.Sp
Discard sectors on \s-1DEVICE\s0
.Sp
.Vb 3
\&        \-o OFS  Byte offset into device
\&        \-l LEN  Number of bytes to discard
\&        \-s      Perform a secure discard
.Ve
.IP "\fBblkid\fR" 4
.IX Item "blkid"
blkid [\s-1BLOCKDEV\s0]...
.Sp
Print UUIDs of all filesystems
.IP "\fBblockdev\fR" 4
.IX Item "blockdev"
blockdev \s-1OPTION BLOCKDEV\s0
.Sp
.Vb 10
\&        \-\-setro         Set ro
\&        \-\-setrw         Set rw
\&        \-\-getro         Get ro
\&        \-\-getss         Get sector size
\&        \-\-getbsz        Get block size
\&        \-\-setbsz BYTES  Set block size
\&        \-\-getsz         Get device size in 512\-byte sectors
\&        \-\-getsize64     Get device size in bytes
\&        \-\-flushbufs     Flush buffers
\&        \-\-rereadpt      Reread partition table
.Ve
.IP "\fBcal\fR" 4
.IX Item "cal"
cal [\-jy] [[\s-1MONTH\s0] \s-1YEAR\s0]
.Sp
Display a calendar
.Sp
.Vb 2
\&        \-j      Use julian dates
\&        \-y      Display the entire year
.Ve
.IP "\fBchat\fR" 4
.IX Item "chat"
chat \s-1EXPECT\s0 [\s-1SEND\s0 [\s-1EXPECT\s0 [\s-1SEND...\s0]]]
.Sp
Useful for interacting with a modem connected to stdin/stdout.
A script consists of one or more \*(L"expect-send\*(R" pairs of strings,
each pair is a pair of arguments. Example:
chat '' \s-1ATZ OK ATD123456 CONNECT \s0'' ogin: pppuser word: ppppass '~'
.IP "\fBchrt\fR" 4
.IX Item "chrt"
chrt [\-prfom] [\s-1PRIO\s0] [\s-1PID\s0 | \s-1PROG ARGS\s0]
.Sp
Change scheduling priority and class for a process
.Sp
.Vb 5
\&        \-p      Operate on PID
\&        \-r      Set SCHED_RR class
\&        \-f      Set SCHED_FIFO class
\&        \-o      Set SCHED_OTHER class
\&        \-m      Show min/max priorities
.Ve
.IP "\fBchvt\fR" 4
.IX Item "chvt"
chvt N
.Sp
Change the foreground virtual terminal to /dev/ttyN
.IP "\fBclear\fR" 4
.IX Item "clear"
clear
.Sp
Clear screen
.IP "\fBcmp\fR" 4
.IX Item "cmp"
cmp [\-l] [\-s] \s-1FILE1\s0 [\s-1FILE2\s0 [\s-1SKIP1\s0 [\s-1SKIP2\s0]]]
.Sp
Compare \s-1FILE1\s0 with \s-1FILE2 \s0(or stdin)
.Sp
.Vb 3
\&        \-l      Write the byte numbers (decimal) and values (octal)
\&                for all differing bytes
\&        \-s      Quiet
.Ve
.IP "\fBconspy\fR" 4
.IX Item "conspy"
conspy [\-vcsndfFQ] [\-x \s-1COL\s0] [\-y \s-1LINE\s0] [\s-1CONSOLE_NO\s0]
.Sp
A text-mode \s-1VNC\s0 like program for Linux virtual consoles.
To exit, quickly press \s-1ESC 3\s0 times.
.Sp
.Vb 10
\&        \-v      Don\*(Aqt send keystrokes to the console
\&        \-c      Create missing /dev/{tty,vcsa}N
\&        \-s      Open a SHELL session
\&        \-n      Black & white
\&        \-d      Dump console to stdout
\&        \-f      Follow cursor
\&        \-F      Assume console is on a framebuffer device
\&        \-Q      Disable exit on ESC\-ESC\-ESC
\&        \-x COL  Starting column
\&        \-y LINE Starting line
.Ve
.IP "\fBcp\fR" 4
.IX Item "cp"
cp [\s-1OPTIONS\s0] \s-1SOURCE... DEST\s0
.Sp
Copy \s-1SOURCE\s0(s) to \s-1DEST\s0
.Sp
.Vb 10
\&        \-a      Same as \-dpR
\&        \-R,\-r   Recurse
\&        \-d,\-P   Preserve symlinks (default if \-R)
\&        \-L      Follow all symlinks
\&        \-H      Follow symlinks on command line
\&        \-p      Preserve file attributes if possible
\&        \-f      Overwrite
\&        \-i      Prompt before overwrite
\&        \-l,\-s   Create (sym)links
\&        \-u      Copy only newer files
.Ve
.IP "\fBcrond\fR" 4
.IX Item "crond"
crond \-fbS \-l N \-d N \-L \s-1LOGFILE\s0 \-c \s-1DIR\s0
.Sp
.Vb 7
\&        \-f      Foreground
\&        \-b      Background (default)
\&        \-S      Log to syslog (default)
\&        \-l N    Set log level. Most verbose 0, default 8
\&        \-d N    Set log level, log to stderr
\&        \-L FILE Log to FILE
\&        \-c DIR  Cron dir. Default:/var/spool/cron/crontabs
.Ve
.IP "\fBcrontab\fR" 4
.IX Item "crontab"
crontab [\-c \s-1DIR\s0] [\-u \s-1USER\s0] [\-ler]|[\s-1FILE\s0]
.Sp
.Vb 6
\&        \-c      Crontab directory
\&        \-u      User
\&        \-l      List crontab
\&        \-e      Edit crontab
\&        \-r      Delete crontab
\&        FILE    Replace crontab by FILE (\*(Aq\-\*(Aq: stdin)
.Ve
.IP "\fBcttyhack\fR" 4
.IX Item "cttyhack"
cttyhack [\s-1PROG ARGS\s0]
.Sp
Give \s-1PROG\s0 a controlling tty if possible.
Example for /etc/inittab (for busybox init):
	::respawn:/bin/cttyhack /bin/sh
Giving controlling tty to shell running with \s-1PID 1:
	$\s0 exec cttyhack sh
Starting interactive shell from boot shell script:
.Sp
.Vb 1
\&        setsid cttyhack sh
.Ve
.IP "\fBcut\fR" 4
.IX Item "cut"
cut [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Print selected fields from each input \s-1FILE\s0 to stdout
.Sp
.Vb 6
\&        \-b LIST Output only bytes from LIST
\&        \-c LIST Output only characters from LIST
\&        \-d CHAR Use CHAR instead of tab as the field delimiter
\&        \-s      Output only the lines containing delimiter
\&        \-f N    Print only these fields
\&        \-n      Ignored
.Ve
.IP "\fBdate\fR" 4
.IX Item "date"
date [\s-1OPTIONS\s0] [+FMT] [\s-1TIME\s0]
.Sp
Display time (using +FMT), or set time
.Sp
.Vb 10
\&        [\-s,\-\-set] TIME Set time to TIME
\&        \-u,\-\-utc        Work in UTC (don\*(Aqt convert to local time)
\&        \-R,\-\-rfc\-2822   Output RFC\-2822 compliant date string
\&        \-I[SPEC]        Output ISO\-8601 compliant date string
\&                        SPEC=\*(Aqdate\*(Aq (default) for date only,
\&                        \*(Aqhours\*(Aq, \*(Aqminutes\*(Aq, or \*(Aqseconds\*(Aq for date and
\&                        time to the indicated precision
\&        \-r,\-\-reference FILE     Display last modification time of FILE
\&        \-d,\-\-date TIME  Display TIME, not \*(Aqnow\*(Aq
\&        \-D FMT          Use FMT for \-d TIME conversion
.Ve
.Sp
Recognized \s-1TIME\s0 formats:
.Sp
.Vb 5
\&        hh:mm[:ss]
\&        [YYYY.]MM.DD\-hh:mm[:ss]
\&        YYYY\-MM\-DD hh:mm[:ss]
\&        [[[[[YY]YY]MM]DD]hh]mm[.ss]
\&        \*(Aqdate TIME\*(Aq form accepts MMDDhhmm[[YY]YY][.ss] instead
.Ve
.IP "\fBdc\fR" 4
.IX Item "dc"
dc \s-1EXPRESSION...\s0
.Sp
Tiny \s-1RPN\s0 calculator. Operations:
+, add, \-, sub, *, mul, /, div, %, mod, **, exp, and, or, not, xor,
p \- print top of the stack (without popping),
f \- print entire stack,
o \- pop the value and set output radix (must be 10, 16, 8 or 2).
Examples: 'dc 2 2 add p' \-> 4, 'dc 8 8 mul 2 2 + / p' \-> 16
.IP "\fBdd\fR" 4
.IX Item "dd"
dd [if=FILE] [of=FILE] [ibs=N] [obs=N] [bs=N] [count=N] [skip=N]
	[seek=N] [conv=notrunc|noerror|sync|fsync] [iflag=skip_bytes]
.Sp
Copy a file with converting and formatting
.Sp
.Vb 10
\&        if=FILE         Read from FILE instead of stdin
\&        of=FILE         Write to FILE instead of stdout
\&        bs=N            Read and write N bytes at a time
\&        ibs=N           Read N bytes at a time
\&        obs=N           Write N bytes at a time
\&        count=N         Copy only N input blocks
\&        skip=N          Skip N input blocks
\&        seek=N          Skip N output blocks
\&        conv=notrunc    Don\*(Aqt truncate output file
\&        conv=noerror    Continue after read errors
\&        conv=sync       Pad blocks with zeros
\&        conv=fsync      Physically write data out before finishing
\&        conv=swab       Swap every pair of bytes
\&        iflag=skip_bytes        skip=N is in bytes
\&        status=noxfer   Suppress rate output
\&        status=none     Suppress all output
.Ve
.Sp
N may be suffixed by c (1), w (2), b (512), kB (1000), k (1024), \s-1MB, M, GB, G\s0
.IP "\fBdepmod\fR" 4
.IX Item "depmod"
depmod [\-n]
.Sp
Generate modules.dep.bb
.Sp
.Vb 1
\&        \-n      Dry run: print file to stdout
.Ve
.IP "\fBdevmem\fR" 4
.IX Item "devmem"
devmem \s-1ADDRESS\s0 [\s-1WIDTH\s0 [\s-1VALUE\s0]]
.Sp
Read/write from physical address
.Sp
.Vb 3
\&        ADDRESS Address to act upon
\&        WIDTH   Width (8/16/...)
\&        VALUE   Data to be written
.Ve
.IP "\fBdf\fR" 4
.IX Item "df"
df [\-PkmhT] [\s-1FILESYSTEM\s0]...
.Sp
Print filesystem usage statistics
.Sp
.Vb 5
\&        \-P      POSIX output format
\&        \-k      1024\-byte blocks (default)
\&        \-m      1M\-byte blocks
\&        \-h      Human readable (e.g. 1K 243M 2G)
\&        \-T      Print filesystem type
.Ve
.IP "\fBdhcprelay\fR" 4
.IX Item "dhcprelay"
dhcprelay CLIENT_IFACE[,CLIENT_IFACE2]... \s-1SERVER_IFACE\s0 [\s-1SERVER_IP\s0]
.Sp
Relay \s-1DHCP\s0 requests between clients and server
.IP "\fBdiff\fR" 4
.IX Item "diff"
diff [\-abBdiNqrTstw] [\-L \s-1LABEL\s0] [\-S \s-1FILE\s0] [\-U \s-1LINES\s0] \s-1FILE1 FILE2\s0
.Sp
Compare files line by line and output the differences between them.
This implementation supports unified diffs only.
.Sp
.Vb 10
\&        \-a      Treat all files as text
\&        \-b      Ignore changes in the amount of whitespace
\&        \-B      Ignore changes whose lines are all blank
\&        \-d      Try hard to find a smaller set of changes
\&        \-i      Ignore case differences
\&        \-L      Use LABEL instead of the filename in the unified header
\&        \-N      Treat absent files as empty
\&        \-q      Output only whether files differ
\&        \-r      Recurse
\&        \-S      Start with FILE when comparing directories
\&        \-T      Make tabs line up by prefixing a tab when necessary
\&        \-s      Report when two files are the same
\&        \-t      Expand tabs to spaces in output
\&        \-U      Output LINES lines of context
\&        \-w      Ignore all whitespace
.Ve
.IP "\fBdirname\fR" 4
.IX Item "dirname"
dirname \s-1FILENAME\s0
.Sp
Strip non-directory suffix from \s-1FILENAME\s0
.IP "\fBdmesg\fR" 4
.IX Item "dmesg"
dmesg [\-c] [\-n \s-1LEVEL\s0] [\-s \s-1SIZE\s0]
.Sp
Print or control the kernel ring buffer
.Sp
.Vb 4
\&        \-c              Clear ring buffer after printing
\&        \-n LEVEL        Set console logging level
\&        \-s SIZE         Buffer size
\&        \-r              Print raw message buffer
.Ve
.IP "\fBdumpleases\fR" 4
.IX Item "dumpleases"
dumpleases [\-r|\-a] [\-d] [\-f \s-1LEASEFILE\s0]
.Sp
Display \s-1DHCP\s0 leases granted by udhcpd
.Sp
.Vb 4
\&        \-f,\-\-file FILE  Lease file
\&        \-r,\-\-remaining  Show remaining time
\&        \-a,\-\-absolute   Show expiration time
\&        \-d,\-\-decimal    Show time in seconds
.Ve
.IP "\fBecho\fR" 4
.IX Item "echo"
echo [\-neE] [\s-1ARG\s0]...
.Sp
Print the specified ARGs to stdout
.Sp
.Vb 3
\&        \-n      Suppress trailing newline
\&        \-e      Interpret backslash escapes (i.e., \et=tab)
\&        \-E      Don\*(Aqt interpret backslash escapes (default)
.Ve
.IP "\fBenv\fR" 4
.IX Item "env"
env [\-iu] [\-] [name=value]... [\s-1PROG ARGS\s0]
.Sp
Print the current environment or run \s-1PROG\s0 after setting up
the specified environment
.Sp
.Vb 2
\&        \-, \-i   Start with an empty environment
\&        \-u      Remove variable from the environment
.Ve
.IP "\fBexpand\fR" 4
.IX Item "expand"
expand [\-i] [\-t N] [\s-1FILE\s0]...
.Sp
Convert tabs to spaces, writing to stdout
.Sp
.Vb 2
\&        \-i,\-\-initial    Don\*(Aqt convert tabs after non blanks
\&        \-t,\-\-tabs N     Tabstops every N chars
.Ve
.IP "\fBexpr\fR" 4
.IX Item "expr"
expr \s-1EXPRESSION\s0
.Sp
Print the value of \s-1EXPRESSION\s0 to stdout
.Sp
\&\s-1EXPRESSION\s0 may be:
.Sp
.Vb 10
\&        ARG1 | ARG2     ARG1 if it is neither null nor 0, otherwise ARG2
\&        ARG1 & ARG2     ARG1 if neither argument is null or 0, otherwise 0
\&        ARG1 < ARG2     1 if ARG1 is less than ARG2, else 0. Similarly:
\&        ARG1 <= ARG2
\&        ARG1 = ARG2
\&        ARG1 != ARG2
\&        ARG1 >= ARG2
\&        ARG1 > ARG2
\&        ARG1 + ARG2     Sum of ARG1 and ARG2. Similarly:
\&        ARG1 \- ARG2
\&        ARG1 * ARG2
\&        ARG1 / ARG2
\&        ARG1 % ARG2
\&        STRING : REGEXP         Anchored pattern match of REGEXP in STRING
\&        match STRING REGEXP     Same as STRING : REGEXP
\&        substr STRING POS LENGTH Substring of STRING, POS counted from 1
\&        index STRING CHARS      Index in STRING where any CHARS is found, or 0
\&        length STRING           Length of STRING
\&        quote TOKEN             Interpret TOKEN as a string, even if
\&                                it is a keyword like \*(Aqmatch\*(Aq or an
\&                                operator like \*(Aq/\*(Aq
\&        (EXPRESSION)            Value of EXPRESSION
.Ve
.Sp
Beware that many operators need to be escaped or quoted for shells.
Comparisons are arithmetic if both ARGs are numbers, else
lexicographical. Pattern matches return the string matched between
\&\e( and \e) or null; if \e( and \e) are not used, they return the number
of characters matched or 0.
.IP "\fBfactor\fR" 4
.IX Item "factor"
factor [\s-1NUMBER\s0]...
.Sp
Print prime factors
.IP "\fBfakeidentd\fR" 4
.IX Item "fakeidentd"
fakeidentd [\-fiw] [\-b \s-1ADDR\s0] [\s-1STRING\s0]
.Sp
Provide fake ident (auth) service
.Sp
.Vb 5
\&        \-f      Run in foreground
\&        \-i      Inetd mode
\&        \-w      Inetd \*(Aqwait\*(Aq mode
\&        \-b ADDR Bind to specified address
\&        STRING  Ident answer string (default: nobody)
.Ve
.IP "\fBfallocate\fR" 4
.IX Item "fallocate"
fallocate [\-o \s-1OFS\s0] \-l \s-1LEN FILE\s0
.Sp
Preallocate space for \s-1FILE\s0
.Sp
.Vb 2
\&        \-o OFS  Offset of range
\&        \-l LEN  Length of range
.Ve
.IP "\fBfatattr\fR" 4
.IX Item "fatattr"
fatattr [\-+rhsvda] \s-1FILE...\s0
.Sp
Change file attributes on \s-1FAT\s0 filesystem
.Sp
.Vb 8
\&        \-       Clear attributes
\&        +       Set attributes
\&        r       Read only
\&        h       Hidden
\&        s       System
\&        v       Volume label
\&        d       Directory
\&        a       Archive
.Ve
.IP "\fBfdflush\fR" 4
.IX Item "fdflush"
fdflush \s-1DEVICE\s0
.Sp
Force floppy disk drive to detect disk change
.IP "\fBfdformat\fR" 4
.IX Item "fdformat"
fdformat [\-n] \s-1DEVICE\s0
.Sp
Format floppy disk
.Sp
.Vb 1
\&        \-n      Don\*(Aqt verify after format
.Ve
.IP "\fBfind\fR" 4
.IX Item "find"
find [\-HL] [\s-1PATH\s0]... [\s-1OPTIONS\s0] [\s-1ACTIONS\s0]
.Sp
Search for files and perform actions on them.
First failed action stops processing of current file.
Defaults: \s-1PATH\s0 is current directory, action is '\-print'
.Sp
.Vb 2
\&        \-L,\-follow      Follow symlinks
\&        \-H              ...on command line only
.Ve
.Sp
Actions:
.Sp
.Vb 7
\&        ACT1 [\-a] ACT2  If ACT1 fails, stop, else do ACT2
\&        ACT1 \-o ACT2    If ACT1 succeeds, stop, else do ACT2
\&                        Note: \-a has higher priority than \-o
\&        \-name PATTERN   Match file name (w/o directory name) to PATTERN
\&        \-iname PATTERN  Case insensitive \-name
\&If none of the following actions is specified, \-print is assumed
\&        \-print          Print file name
.Ve
.IP "\fBfindfs\fR" 4
.IX Item "findfs"
findfs LABEL=label or UUID=uuid
.Sp
Find a filesystem device based on a label or \s-1UUID\s0
.IP "\fBflock\fR" 4
.IX Item "flock"
flock [\-sxun] FD|{\s-1FILE\s0 [\-c] \s-1PROG ARGS\s0}
.Sp
[Un]lock file descriptor, or lock \s-1FILE,\s0 run \s-1PROG\s0
.Sp
.Vb 4
\&        \-s      Shared lock
\&        \-x      Exclusive lock (default)
\&        \-u      Unlock FD
\&        \-n      Fail rather than wait
.Ve
.IP "\fBfold\fR" 4
.IX Item "fold"
fold [\-bs] [\-w \s-1WIDTH\s0] [\s-1FILE\s0]...
.Sp
Wrap input lines in each \s-1FILE \s0(or stdin), writing to stdout
.Sp
.Vb 3
\&        \-b      Count bytes rather than columns
\&        \-s      Break at spaces
\&        \-w      Use WIDTH columns instead of 80
.Ve
.IP "\fBfree\fR" 4
.IX Item "free"
free [\-b/k/m/g]
.Sp
Display the amount of free and used system memory
.IP "\fBfreeramdisk\fR" 4
.IX Item "freeramdisk"
freeramdisk \s-1DEVICE\s0
.Sp
Free all memory used by the specified ramdisk
.IP "\fBfsck.minix\fR" 4
.IX Item "fsck.minix"
fsck.minix [\-larvsmf] \s-1BLOCKDEV\s0
.Sp
Check \s-1MINIX\s0 filesystem
.Sp
.Vb 7
\&        \-l      List all filenames
\&        \-r      Perform interactive repairs
\&        \-a      Perform automatic repairs
\&        \-v      Verbose
\&        \-s      Output superblock information
\&        \-m      Show "mode not cleared" warnings
\&        \-f      Force file system check
.Ve
.IP "\fBfsfreeze\fR" 4
.IX Item "fsfreeze"
fsfreeze \-\-[un]freeze \s-1MOUNTPOINT\s0
.Sp
Flush and halt writes to \s-1MOUNTPOINT\s0
.IP "\fBfstrim\fR" 4
.IX Item "fstrim"
fstrim [\s-1OPTIONS\s0] \s-1MOUNTPOINT\s0
.Sp
.Vb 4
\&        \-o,\-\-offset OFFSET      Offset in bytes to discard from
\&        \-l,\-\-length LEN         Bytes to discard
\&        \-m,\-\-minimum MIN        Minimum extent length
\&        \-v,\-\-verbose            Print number of discarded bytes
.Ve
.IP "\fBfsync\fR" 4
.IX Item "fsync"
fsync [\-d] \s-1FILE...\s0
.Sp
Write files' buffered blocks to disk
.Sp
.Vb 1
\&        \-d      Avoid syncing metadata
.Ve
.IP "\fBgetopt\fR" 4
.IX Item "getopt"
getopt [\s-1OPTIONS\s0] [\-\-] \s-1OPTSTRING PARAMS\s0
.Sp
.Vb 9
\&        \-a,\-\-alternative                Allow long options starting with single \-
\&        \-l,\-\-longoptions LOPT[,...]     Long options to recognize
\&        \-n,\-\-name PROGNAME              The name under which errors are reported
\&        \-o,\-\-options OPTSTRING          Short options to recognize
\&        \-q,\-\-quiet                      No error messages on unrecognized options
\&        \-Q,\-\-quiet\-output               No normal output
\&        \-s,\-\-shell SHELL                Set shell quoting conventions
\&        \-T,\-\-test                       Version test (exits with 4)
\&        \-u,\-\-unquoted                   Don\*(Aqt quote output
.Ve
.Sp
Example:
.Sp
O=`getopt \-l bb: \*(-- ab:c:: \*(L"$@\*(R"` || exit 1
eval set \*(-- \*(L"$O\*(R"
while true; do
	case \*(L"$1\*(R" in
	\-a)	echo A; shift;;
	\-b|\-\-bb) echo \*(L"B:'$2'\*(R"; shift 2;;
	\-c)	case \*(L"$2\*(R" in
		"\*(L")	echo C; shift 2;;
		*)	echo \*(R"C:'$2'"; shift 2;;
		esac;;
	\-\-)	shift; break;;
	*)	echo Error; exit 1;;
	esac
done
.IP "\fBgetty\fR" 4
.IX Item "getty"
getty [\s-1OPTIONS\s0] BAUD_RATE[,BAUD_RATE]... \s-1TTY\s0 [\s-1TERMTYPE\s0]
.Sp
Open \s-1TTY,\s0 prompt for login name, then invoke /bin/login
.Sp
.Vb 11
\&        \-h              Enable hardware RTS/CTS flow control
\&        \-L              Set CLOCAL (ignore Carrier Detect state)
\&        \-m              Get baud rate from modem\*(Aqs CONNECT status message
\&        \-n              Don\*(Aqt prompt for login name
\&        \-w              Wait for CR or LF before sending /etc/issue
\&        \-i              Don\*(Aqt display /etc/issue
\&        \-f ISSUE_FILE   Display ISSUE_FILE instead of /etc/issue
\&        \-l LOGIN        Invoke LOGIN instead of /bin/login
\&        \-t SEC          Terminate after SEC if no login name is read
\&        \-I INITSTR      Send INITSTR before anything else
\&        \-H HOST         Log HOST into the utmp file as the hostname
.Ve
.Sp
\&\s-1BAUD_RATE\s0 of 0 leaves it unchanged
.IP "\fBgrep\fR" 4
.IX Item "grep"
grep [\-HhnlLoqvsriwFE] [\-m N] PATTERN/\-e \s-1PATTERN..\s0./\-f \s-1FILE\s0 [\s-1FILE\s0]...
.Sp
Search for \s-1PATTERN\s0 in FILEs (or stdin)
.Sp
.Vb 10
\&        \-H      Add \*(Aqfilename:\*(Aq prefix
\&        \-h      Do not add \*(Aqfilename:\*(Aq prefix
\&        \-n      Add \*(Aqline_no:\*(Aq prefix
\&        \-l      Show only names of files that match
\&        \-L      Show only names of files that don\*(Aqt match
\&        \-c      Show only count of matching lines
\&        \-o      Show only the matching part of line
\&        \-q      Quiet. Return 0 if PATTERN is found, 1 otherwise
\&        \-v      Select non\-matching lines
\&        \-s      Suppress open and read errors
\&        \-r      Recurse
\&        \-i      Ignore case
\&        \-w      Match whole words only
\&        \-x      Match whole lines only
\&        \-F      PATTERN is a literal (not regexp)
\&        \-E      PATTERN is an extended regexp
\&        \-m N    Match up to N times per file
\&        \-e PTRN Pattern to match
\&        \-f FILE Read pattern from file
.Ve
.IP "\fBgroups\fR" 4
.IX Item "groups"
groups [\s-1USER\s0]
.Sp
Print the group memberships of \s-1USER\s0 or for the current process
.IP "\fBhd\fR" 4
.IX Item "hd"
hd \s-1FILE...\s0
.Sp
hd is an alias for hexdump \-C
.IP "\fBhead\fR" 4
.IX Item "head"
head [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Print first 10 lines of each \s-1FILE \s0(or stdin) to stdout.
With more than one \s-1FILE,\s0 precede each with a filename header.
.Sp
.Vb 5
\&        \-n N[kbm]       Print first N lines
\&        \-n \-N[kbm]      Print all except N last lines
\&        \-c [\-]N[kbm]    Print first N bytes
\&        \-q              Never print headers
\&        \-v              Always print headers
.Ve
.Sp
N may be suffixed by k (x1024), b (x512), or m (x1024^2).
.IP "\fBhexdump\fR" 4
.IX Item "hexdump"
hexdump [\-bcCdefnosvxR] [\s-1FILE\s0]...
.Sp
Display FILEs (or stdin) in a user specified format
.Sp
.Vb 12
\&        \-b              1\-byte octal display
\&        \-c              1\-byte character display
\&        \-d              2\-byte decimal display
\&        \-o              2\-byte octal display
\&        \-x              2\-byte hex display
\&        \-C              hex+ASCII 16 bytes per line
\&        \-v              Show all (no dup folding)
\&        \-e FORMAT_STR   Example: \*(Aq16/1 "%02x|""\en"\*(Aq
\&        \-f FORMAT_FILE
\&        \-n LENGTH       Show only first LENGTH bytes
\&        \-s OFFSET       Skip OFFSET bytes
\&        \-R              Reverse of \*(Aqhexdump \-Cv\*(Aq
.Ve
.IP "\fBhostid\fR" 4
.IX Item "hostid"
hostid
.Sp
Print out a unique 32\-bit identifier for the machine
.IP "\fBhostname\fR" 4
.IX Item "hostname"
hostname [\s-1OPTIONS\s0] [\s-1HOSTNAME\s0 | \-F \s-1FILE\s0]
.Sp
Get or set hostname or \s-1DNS\s0 domain name
.Sp
.Vb 5
\&        \-s      Short
\&        \-i      Addresses for the hostname
\&        \-d      DNS domain name
\&        \-f      Fully qualified domain name
\&        \-F FILE Use FILE\*(Aqs content as hostname
.Ve
.IP "\fBhwclock\fR" 4
.IX Item "hwclock"
hwclock [\-r|\-\-show] [\-s|\-\-hctosys] [\-w|\-\-systohc] [\-t|\-\-systz] [\-l|\-\-localtime] [\-u|\-\-utc] [\-f|\-\-rtc \s-1FILE\s0]
.Sp
Query and set hardware clock (\s-1RTC\s0)
.Sp
.Vb 8
\&        \-r      Show hardware clock time
\&        \-s      Set system time from hardware clock
\&        \-w      Set hardware clock from system time
\&        \-t      Set in\-kernel timezone, correct system time
\&                if hardware clock is in local time
\&        \-u      Assume hardware clock is kept in UTC
\&        \-l      Assume hardware clock is kept in local time
\&        \-f FILE Use specified device (e.g. /dev/rtc2)
.Ve
.IP "\fBi2cdetect\fR" 4
.IX Item "i2cdetect"
i2cdetect [\-F I2CBUS] [\-l] [\-y] [\-a] [\-q|\-r] I2CBUS [\s-1FIRST LAST\s0]
.Sp
Detect I2C chips.
.Sp
.Vb 2
\&        I2CBUS  i2c bus number
\&        FIRST and LAST limit the probing range
\&
\&        \-l      output list of installed busses
\&        \-y      disable interactive mode
\&        \-a      force scanning of non\-regular addresses
\&        \-q      use smbus quick write commands for probing (default)
\&        \-r      use smbus read byte commands for probing
\&        \-F      display list of functionalities
.Ve
.IP "\fBi2cdump\fR" 4
.IX Item "i2cdump"
i2cdump [\-f] [\-r \s-1FIRST\-LAST\s0] [\-y] \s-1BUS ADDR\s0 [\s-1MODE\s0]
.Sp
Examine I2C registers
.Sp
.Vb 3
\&        I2CBUS  i2c bus number
\&        ADDRESS 0x03 \- 0x77
\&MODE is:
\&
\&        b       byte (default)
\&        w       word
\&        W       word on even register addresses
\&        i       I2C block
\&        s       SMBus block
\&        c       consecutive byte
\&        Append p for SMBus PEC
\&
\&        \-f      force access
\&        \-y      disable interactive mode
\&        \-r      limit the number of registers being accessed
.Ve
.IP "\fBi2cget\fR" 4
.IX Item "i2cget"
i2cget [\-f] [\-y] \s-1BUS\s0 CHIP-ADDRESS [\s-1DATA\-ADDRESS\s0 [\s-1MODE\s0]]
.Sp
Read from I2C/SMBus chip registers
.Sp
.Vb 3
\&        I2CBUS  i2c bus number
\&        ADDRESS 0x03 \- 0x77
\&MODE is:
\&
\&        b       read byte data (default)
\&        w       read word data
\&        c       write byte/read byte
\&        Append p for SMBus PEC
\&
\&        \-f      force access
\&        \-y      disable interactive mode
.Ve
.IP "\fBi2cset\fR" 4
.IX Item "i2cset"
i2cset [\-f] [\-y] [\-m \s-1MASK\s0] \s-1BUS\s0 CHIP-ADDR DATA-ADDR [\s-1VALUE\s0] ... [\s-1MODE\s0]
.Sp
Set I2C registers
.Sp
.Vb 3
\&        I2CBUS  i2c bus number
\&        ADDRESS 0x03 \- 0x77
\&MODE is:
\&
\&        c       byte, no value
\&        b       byte data (default)
\&        w       word data
\&        i       I2C block data
\&        s       SMBus block data
\&        Append p for SMBus PEC
\&
\&        \-f      force access
\&        \-y      disable interactive mode
\&        \-r      read back and compare the result
\&        \-m MASK mask specifying which bits to write
.Ve
.IP "\fBid\fR" 4
.IX Item "id"
id [\s-1OPTIONS\s0] [\s-1USER\s0]
.Sp
Print information about \s-1USER\s0 or the current user
.Sp
.Vb 5
\&        \-u      User ID
\&        \-g      Group ID
\&        \-G      Supplementary group IDs
\&        \-n      Print names instead of numbers
\&        \-r      Print real ID instead of effective ID
.Ve
.IP "\fBifconfig\fR" 4
.IX Item "ifconfig"
ifconfig [\-a] interface [address]
.Sp
Configure a network interface
.Sp
.Vb 6
\&        [[\-]broadcast [ADDRESS]] [[\-]pointopoint [ADDRESS]]
\&        [netmask ADDRESS] [dstaddr ADDRESS]
\&        [hw ether|infiniband ADDRESS] [metric NN] [mtu NN]
\&        [[\-]trailers] [[\-]arp] [[\-]allmulti]
\&        [multicast] [[\-]promisc] [txqueuelen NN] [[\-]dynamic]
\&        [up|down] ...
.Ve
.IP "\fBifdown\fR" 4
.IX Item "ifdown"
ifdown [\-anmvf] [\-i \s-1FILE\s0] \s-1IFACE...\s0
.Sp
.Vb 7
\&        \-a      Deconfigure all interfaces
\&        \-i FILE Use FILE for interface definitions
\&        \-n      Print out what would happen, but don\*(Aqt do it
\&                (note: doesn\*(Aqt disable mappings)
\&        \-m      Don\*(Aqt run any mappings
\&        \-v      Print out what would happen before doing it
\&        \-f      Force deconfiguration
.Ve
.IP "\fBifplugd\fR" 4
.IX Item "ifplugd"
ifplugd [\s-1OPTIONS\s0]
.Sp
Network interface plug detection daemon
.Sp
.Vb 10
\&        \-n              Don\*(Aqt daemonize
\&        \-s              Don\*(Aqt log to syslog
\&        \-i IFACE        Interface
\&        \-f/\-F           Treat link detection error as link down/link up
\&                        (otherwise exit on error)
\&        \-a              Don\*(Aqt up interface at each link probe
\&        \-M              Monitor creation/destruction of interface
\&                        (otherwise it must exist)
\&        \-r PROG         Script to run
\&        \-x ARG          Extra argument for script
\&        \-I              Don\*(Aqt exit on nonzero exit code from script
\&        \-p              Don\*(Aqt run "up" script on startup
\&        \-q              Don\*(Aqt run "down" script on exit
\&        \-l              Always run script on startup
\&        \-t SECS         Poll time in seconds
\&        \-u SECS         Delay before running script after link up
\&        \-d SECS         Delay after link down
\&        \-m MODE         API mode (mii, priv, ethtool, wlan, iff, auto)
\&        \-k              Kill running daemon
.Ve
.IP "\fBifup\fR" 4
.IX Item "ifup"
ifup [\-anmvf] [\-i \s-1FILE\s0] \s-1IFACE...\s0
.Sp
.Vb 7
\&        \-a      Configure all interfaces
\&        \-i FILE Use FILE instead of /etc/network/interfaces
\&        \-n      Print out what would happen, but don\*(Aqt do it
\&                (note: doesn\*(Aqt disable mappings)
\&        \-m      Don\*(Aqt run any mappings
\&        \-v      Print out what would happen before doing it
\&        \-f      Force configuration
.Ve
.IP "\fBinetd\fR" 4
.IX Item "inetd"
inetd [\-fe] [\-q N] [\-R N] [\s-1CONFFILE\s0]
.Sp
Listen for network connections and launch programs
.Sp
.Vb 5
\&        \-f      Run in foreground
\&        \-e      Log to stderr
\&        \-q N    Socket listen queue (default 128)
\&        \-R N    Pause services after N connects/min
\&                (default 0 \- disabled)
.Ve
.IP "\fBinit\fR" 4
.IX Item "init"
init
.Sp
Init is the first process started during boot. It never exits.
It (re)spawns children according to /etc/inittab.
.IP "\fBinsmod\fR" 4
.IX Item "insmod"
insmod \s-1FILE\s0 [SYMBOL=VALUE]...
.Sp
Load kernel module
.IP "\fBinstall\fR" 4
.IX Item "install"
install [\-cdDsp] [\-o \s-1USER\s0] [\-g \s-1GRP\s0] [\-m \s-1MODE\s0] [\-t \s-1DIR\s0] [\s-1SOURCE\s0]... \s-1DEST\s0
.Sp
Copy files and set attributes
.Sp
.Vb 9
\&        \-c      Just copy (default)
\&        \-d      Create directories
\&        \-D      Create leading target directories
\&        \-s      Strip symbol table
\&        \-p      Preserve date
\&        \-o USER Set ownership
\&        \-g GRP  Set group ownership
\&        \-m MODE Set permissions
\&        \-t DIR  Install to DIR
.Ve
.IP "\fBionice\fR" 4
.IX Item "ionice"
ionice [\-c 1\-3] [\-n 0\-7] [\-p \s-1PID\s0] [\s-1PROG\s0]
.Sp
Change I/O priority and class
.Sp
.Vb 2
\&        \-c      Class. 1:realtime 2:best\-effort 3:idle
\&        \-n      Priority
.Ve
.IP "\fBip\fR" 4
.IX Item "ip"
ip [\s-1OPTIONS\s0] address|route|link|tunnel|neigh|rule [\s-1COMMAND\s0]
.Sp
\&\s-1OPTIONS\s0 := \-f[amily] inet|inet6|link | \-o[neline]
\&\s-1COMMAND\s0 :=
ip addr add|del \s-1IFADDR\s0 dev \s-1IFACE\s0 | show|flush [dev \s-1IFACE\s0] [to \s-1PREFIX\s0]
ip route list|flush|add|del|change|append|replace|test \s-1ROUTE\s0
ip link set \s-1IFACE\s0 [up|down] [arp on|off] | show [\s-1IFACE\s0]
ip tunnel add|change|del|show [\s-1NAME\s0]
	[mode ipip|gre|sit]
	[remote \s-1ADDR\s0] [local \s-1ADDR\s0] [ttl \s-1TTL\s0]
ip neigh show|flush [to \s-1PREFIX\s0] [dev \s-1DEV\s0] [nud \s-1STATE\s0]
ip rule [list] | add|del \s-1SELECTOR ACTION\s0
.IP "\fBipaddr\fR" 4
.IX Item "ipaddr"
ipaddr add|del \s-1IFADDR\s0 dev \s-1IFACE\s0 | show|flush [dev \s-1IFACE\s0] [to \s-1PREFIX\s0]
.Sp
ipaddr add|change|replace|delete dev \s-1IFACE IFADDR
	IFADDR\s0 := \s-1PREFIX\s0 | \s-1ADDR\s0 peer \s-1PREFIX\s0 [broadcast ADDR|+|\-]
		[anycast \s-1ADDR\s0] [label \s-1STRING\s0] [scope \s-1SCOPE\s0]
	\s-1PREFIX\s0 := ADDR[/MASK]
	\s-1SCOPE\s0 := [host|link|global|NUMBER]
ipaddr show|flush [dev \s-1IFACE\s0] [scope \s-1SCOPE\s0] [to \s-1PREFIX\s0] [label \s-1PATTERN\s0]
.IP "\fBipcalc\fR" 4
.IX Item "ipcalc"
ipcalc [\s-1OPTIONS\s0] ADDRESS[/PREFIX] [\s-1NETMASK\s0]
.Sp
Calculate \s-1IP\s0 network settings from a \s-1IP\s0 address
.Sp
.Vb 6
\&        \-b,\-\-broadcast  Display calculated broadcast address
\&        \-n,\-\-network    Display calculated network address
\&        \-m,\-\-netmask    Display default netmask for IP
\&        \-p,\-\-prefix     Display the prefix for IP/NETMASK
\&        \-h,\-\-hostname   Display first resolved host name
\&        \-s,\-\-silent     Don\*(Aqt ever display error messages
.Ve
.IP "\fBipcrm\fR" 4
.IX Item "ipcrm"
ipcrm [\-MQS key] [\-mqs id]
.Sp
Upper-case options \s-1MQS\s0 remove an object by shmkey value.
Lower-case options remove an object by shmid value.
.Sp
.Vb 3
\&        \-mM     Remove memory segment after last detach
\&        \-qQ     Remove message queue
\&        \-sS     Remove semaphore
.Ve
.IP "\fBipcs\fR" 4
.IX Item "ipcs"
ipcs [[\-smq] \-i shmid] | [[\-asmq] [\-tcplu]]
.Sp
.Vb 2
\&        \-i      Show specific resource
\&Resource specification:
\&
\&        \-m      Shared memory segments
\&        \-q      Message queues
\&        \-s      Semaphore arrays
\&        \-a      All (default)
\&Output format:
\&
\&        \-t      Time
\&        \-c      Creator
\&        \-p      Pid
\&        \-l      Limits
\&        \-u      Summary
.Ve
.IP "\fBiplink\fR" 4
.IX Item "iplink"
iplink set \s-1IFACE\s0 [up|down] [arp on|off] | show [\s-1IFACE\s0]
.Sp
iplink set \s-1IFACE\s0 [up|down] [arp on|off] [multicast on|off] [promisc on|off]
	[mtu \s-1NUM\s0] [name \s-1NAME\s0] [qlen \s-1NUM\s0] [address \s-1MAC\s0]
iplink show [\s-1IFACE\s0]
.IP "\fBipneigh\fR" 4
.IX Item "ipneigh"
ipneigh show|flush [to \s-1PREFIX\s0] [dev \s-1DEV\s0] [nud \s-1STATE\s0]
.IP "\fBiproute\fR" 4
.IX Item "iproute"
iproute list|flush|add|del|change|append|replace|test \s-1ROUTE\s0
.Sp
iproute list|flush \s-1SELECTOR
	SELECTOR\s0 := [root \s-1PREFIX\s0] [match \s-1PREFIX\s0] [proto \s-1RTPROTO\s0]
	\s-1PREFIX\s0 := default|ADDR[/MASK]
iproute get \s-1ADDR\s0 [from \s-1ADDR\s0 iif \s-1IFACE\s0]
	[oif \s-1IFACE\s0] [tos \s-1TOS\s0]
iproute add|del|change|append|replace|test \s-1ROUTE
	ROUTE\s0 := \s-1NODE_SPEC\s0 [\s-1INFO_SPEC\s0]
	\s-1NODE_SPEC\s0 := \s-1PREFIX\s0 [table \s-1TABLE_ID\s0] [proto \s-1RTPROTO\s0] [scope \s-1SCOPE\s0] [metric \s-1METRIC\s0]
	\s-1INFO_SPEC\s0 := \s-1NH OPTIONS
	NH\s0 := [via [inet|inet6] \s-1ADDR\s0] [dev \s-1IFACE\s0] [src \s-1ADDR\s0] [onlink]
	\s-1OPTIONS\s0 := [mtu [lock] \s-1NUM\s0] [advmss [lock] \s-1NUM\s0]
.IP "\fBiprule\fR" 4
.IX Item "iprule"
iprule [list] | add|del \s-1SELECTOR ACTION\s0
.Sp
.Vb 6
\&        SELECTOR := [from PREFIX] [to PREFIX] [tos TOS] [fwmark FWMARK]
\&                        [dev IFACE] [pref NUMBER]
\&        ACTION := [table TABLE_ID] [nat ADDR]
\&                        [prohibit|reject|unreachable]
\&                        [realms [SRCREALM/]DSTREALM]
\&        TABLE_ID := [local|main|default|NUMBER]
.Ve
.IP "\fBiptunnel\fR" 4
.IX Item "iptunnel"
iptunnel add|change|del|show [\s-1NAME\s0]
	[mode ipip|gre|sit]
	[remote \s-1ADDR\s0] [local \s-1ADDR\s0] [ttl \s-1TTL\s0]
.Sp
iptunnel add|change|del|show [\s-1NAME\s0]
	[mode ipip|gre|sit] [remote \s-1ADDR\s0] [local \s-1ADDR\s0]
	[[i|o]seq] [[i|o]key \s-1KEY\s0] [[i|o]csum]
	[ttl \s-1TTL\s0] [tos \s-1TOS\s0] [[no]pmtudisc] [dev \s-1PHYS_DEV\s0]
.IP "\fBkill\fR" 4
.IX Item "kill"
kill [\-l] [\-SIG] \s-1PID...\s0
.Sp
Send a signal (default: \s-1TERM\s0) to given PIDs
.Sp
.Vb 1
\&        \-l      List all signal names and numbers
.Ve
.IP "\fBklogd\fR" 4
.IX Item "klogd"
klogd [\-c N] [\-n]
.Sp
Kernel logger
.Sp
.Vb 2
\&        \-c N    Print to console messages more urgent than prio N (1\-8)
\&        \-n      Run in foreground
.Ve
.IP "\fBless\fR" 4
.IX Item "less"
less [\-EIMmNSh~] [\s-1FILE\s0]...
.Sp
View \s-1FILE \s0(or stdin) one screenful at a time
.Sp
.Vb 7
\&        \-E      Quit once the end of a file is reached
\&        \-I      Ignore case in all searches
\&        \-M,\-m   Display status line with line numbers
\&                and percentage through the file
\&        \-N      Prefix line number to each line
\&        \-S      Truncate long lines
\&        \-~      Suppress ~s displayed past EOF
.Ve
.IP "\fBlink\fR" 4
.IX Item "link"
link \s-1FILE LINK\s0
.Sp
Create hard \s-1LINK\s0 to \s-1FILE\s0
.IP "\fBln\fR" 4
.IX Item "ln"
ln [\s-1OPTIONS\s0] \s-1TARGET...\s0 LINK|DIR
.Sp
Create a link \s-1LINK\s0 or \s-1DIR/TARGET\s0 to the specified \s-1TARGET\s0(s)
.Sp
.Vb 7
\&        \-s      Make symlinks instead of hardlinks
\&        \-f      Remove existing destinations
\&        \-n      Don\*(Aqt dereference symlinks \- treat like normal file
\&        \-b      Make a backup of the target (if exists) before link operation
\&        \-S suf  Use suffix instead of ~ when making backup files
\&        \-T      2nd arg must be a DIR
\&        \-v      Verbose
.Ve
.IP "\fBlogger\fR" 4
.IX Item "logger"
logger [\s-1OPTIONS\s0] [\s-1MESSAGE\s0]
.Sp
Write \s-1MESSAGE \s0(or stdin) to syslog
.Sp
.Vb 3
\&        \-s      Log to stderr as well as the system log
\&        \-t TAG  Log using the specified tag (defaults to user name)
\&        \-p PRIO Priority (numeric or facility.level pair)
.Ve
.IP "\fBlogin\fR" 4
.IX Item "login"
login [\-p] [\-h \s-1HOST\s0] [[\-f] \s-1USER\s0]
.Sp
Begin a new session on the system
.Sp
.Vb 3
\&        \-f      Don\*(Aqt authenticate (user already authenticated)
\&        \-h HOST Host user came from (for network logins)
\&        \-p      Preserve environment
.Ve
.IP "\fBlogname\fR" 4
.IX Item "logname"
logname
.Sp
Print the name of the current user
.IP "\fBlogread\fR" 4
.IX Item "logread"
logread [\-fF]
.Sp
Show messages in syslogd's circular buffer
.Sp
.Vb 2
\&        \-f      Output data as log grows
\&        \-F      Same as \-f, but dump buffer first
.Ve
.IP "\fBlosetup\fR" 4
.IX Item "losetup"
losetup [\-r] [\-o \s-1OFS\s0] {\-f|LOOPDEV} \s-1FILE \-\s0 associate loop devices
	losetup \-d \s-1LOOPDEV \-\s0 disassociate
	losetup \-a \- show status
	losetup \-f \- show next free loop device
.Sp
.Vb 3
\&        \-o OFS  Start OFS bytes into FILE
\&        \-r      Read\-only
\&        \-f      Show/use next free loop device
.Ve
.IP "\fBls\fR" 4
.IX Item "ls"
ls [\-1AaCxdLHRFplinshrSXvctu] [\-w \s-1WIDTH\s0] [\s-1FILE\s0]...
.Sp
List directory contents
.Sp
.Vb 10
\&        \-1      One column output
\&        \-a      Include entries which start with .
\&        \-A      Like \-a, but exclude . and ..
\&        \-x      List by lines
\&        \-d      List directory entries instead of contents
\&        \-L      Follow symlinks
\&        \-H      Follow symlinks on command line
\&        \-R      Recurse
\&        \-p      Append / to dir entries
\&        \-F      Append indicator (one of */=@|) to entries
\&        \-l      Long listing format
\&        \-i      List inode numbers
\&        \-n      List numeric UIDs and GIDs instead of names
\&        \-s      List allocated blocks
\&        \-lc     List ctime
\&        \-lu     List atime
\&        \-\-full\-time     List full date and time
\&        \-h      Human readable sizes (1K 243M 2G)
\&        \-\-group\-directories\-first
\&        \-S      Sort by size
\&        \-X      Sort by extension
\&        \-v      Sort by version
\&        \-t      Sort by mtime
\&        \-tc     Sort by ctime
\&        \-tu     Sort by atime
\&        \-r      Reverse sort order
\&        \-w N    Format N columns wide
\&        \-\-color[={always,never,auto}]   Control coloring
.Ve
.IP "\fBlsmod\fR" 4
.IX Item "lsmod"
lsmod
.Sp
List loaded kernel modules
.IP "\fBlspci\fR" 4
.IX Item "lspci"
lspci [\-mk]
.Sp
List all \s-1PCI\s0 devices
.Sp
.Vb 2
\&        \-m      Parsable output
\&        \-k      Show driver
.Ve
.IP "\fBmakedevs\fR" 4
.IX Item "makedevs"
makedevs [\-d device_table] rootdir
.Sp
Create a range of special files as specified in a device table.
Device table entries take the form of:
.Sp
<name> <type> <mode> <uid> <gid> <major> <minor> <start> <inc> <count>
Where name is the file name, type can be one of:
	f	Regular file
	d	Directory
	c	Character device
	b	Block device
	p	Fifo (named pipe)
uid is the user id for the target file, gid is the group id for the
target file. The rest of the entries (major, minor, etc) apply to
to device special files. A '\-' may be used for blank entries.
.IP "\fBmdev\fR" 4
.IX Item "mdev"
mdev [\-s]
.Sp
mdev \-s is to be run during boot to scan /sys and populate /dev.
.Sp
Bare mdev is a kernel hotplug helper. To activate it:
	echo /sbin/mdev >/proc/sys/kernel/hotplug
.Sp
It uses /etc/mdev.conf with lines
	[\-][ENV=regex;]...DEVNAME \s-1UID:GID PERM\s0 [>|=PATH]|[!] [@|$|*PROG]
where \s-1DEVNAME\s0 is device name regex, \f(CW@major\fR,minor[\-minor2], or
environment variable regex. A common use of the latter is
to load modules for hotplugged devices:
.Sp
.Vb 1
\&        $MODALIAS=.* 0:0 660 @modprobe "$MODALIAS"
.Ve
.Sp
If /dev/mdev.seq file exists, mdev will wait for its value
to match \f(CW$SEQNUM\fR variable. This prevents plug/unplug races.
To activate this feature, create empty /dev/mdev.seq at boot.
.Sp
If /dev/mdev.log file exists, debug log will be appended to it.
.IP "\fBmesg\fR" 4
.IX Item "mesg"
mesg [y|n]
.Sp
Control write access to your terminal
	y	Allow write access to your terminal
	n	Disallow write access to your terminal
.IP "\fBmkdir\fR" 4
.IX Item "mkdir"
mkdir [\s-1OPTIONS\s0] \s-1DIRECTORY...\s0
.Sp
Create \s-1DIRECTORY\s0
.Sp
.Vb 2
\&        \-m MODE Mode
\&        \-p      No error if exists; make parent directories as needed
.Ve
.IP "\fBmkdosfs\fR" 4
.IX Item "mkdosfs"
mkdosfs [\-v] [\-n \s-1LABEL\s0] \s-1BLOCKDEV\s0 [\s-1KBYTES\s0]
.Sp
Make a \s-1FAT32\s0 filesystem
.Sp
.Vb 2
\&        \-v      Verbose
\&        \-n LBL  Volume label
.Ve
.IP "\fBmke2fs\fR" 4
.IX Item "mke2fs"
mke2fs [\-Fn] [\-b \s-1BLK_SIZE\s0] [\-i \s-1INODE_RATIO\s0] [\-I \s-1INODE_SIZE\s0] [\-m \s-1RESERVED_PERCENT\s0] [\-L \s-1LABEL\s0] \s-1BLOCKDEV\s0 [\s-1KBYTES\s0]
.Sp
.Vb 7
\&        \-b BLK_SIZE     Block size, bytes
\&        \-F              Force
\&        \-i RATIO        Max number of files is filesystem_size / RATIO
\&        \-I BYTES        Inode size (min 128)
\&        \-L LBL          Volume label
\&        \-m PERCENT      Percent of blocks to reserve for admin
\&        \-n              Dry run
.Ve
.IP "\fBmkfifo\fR" 4
.IX Item "mkfifo"
mkfifo [\-m \s-1MODE\s0] \s-1NAME\s0
.Sp
Create named pipe
.Sp
.Vb 1
\&        \-m MODE Mode (default a=rw)
.Ve
.IP "\fBmkfs.ext2\fR" 4
.IX Item "mkfs.ext2"
mkfs.ext2 [\-Fn] [\-b \s-1BLK_SIZE\s0] [\-i \s-1INODE_RATIO\s0] [\-I \s-1INODE_SIZE\s0] [\-m \s-1RESERVED_PERCENT\s0] [\-L \s-1LABEL\s0] \s-1BLOCKDEV\s0 [\s-1KBYTES\s0]
.Sp
.Vb 7
\&        \-b BLK_SIZE     Block size, bytes
\&        \-F              Force
\&        \-i RATIO        Max number of files is filesystem_size / RATIO
\&        \-I BYTES        Inode size (min 128)
\&        \-L LBL          Volume label
\&        \-m PERCENT      Percent of blocks to reserve for admin
\&        \-n              Dry run
.Ve
.IP "\fBmkfs.minix\fR" 4
.IX Item "mkfs.minix"
mkfs.minix [\-c | \-l \s-1FILE\s0] [\-nXX] [\-iXX] \s-1BLOCKDEV\s0 [\s-1KBYTES\s0]
.Sp
Make a \s-1MINIX\s0 filesystem
.Sp
.Vb 5
\&        \-c              Check device for bad blocks
\&        \-n [14|30]      Maximum length of filenames
\&        \-i INODES       Number of inodes for the filesystem
\&        \-l FILE         Read bad blocks list from FILE
\&        \-v              Make version 2 filesystem
.Ve
.IP "\fBmkfs.vfat\fR" 4
.IX Item "mkfs.vfat"
mkfs.vfat [\-v] [\-n \s-1LABEL\s0] \s-1BLOCKDEV\s0 [\s-1KBYTES\s0]
.Sp
Make a \s-1FAT32\s0 filesystem
.Sp
.Vb 2
\&        \-v      Verbose
\&        \-n LBL  Volume label
.Ve
.IP "\fBmknod\fR" 4
.IX Item "mknod"
mknod [\-m \s-1MODE\s0] \s-1NAME TYPE MAJOR MINOR\s0
.Sp
Create a special file (block, character, or pipe)
.Sp
.Vb 5
\&        \-m MODE Creation mode (default a=rw)
\&TYPE:
\&        b       Block device
\&        c or u  Character device
\&        p       Named pipe (MAJOR and MINOR are ignored)
.Ve
.IP "\fBmkswap\fR" 4
.IX Item "mkswap"
mkswap [\-L \s-1LBL\s0] \s-1BLOCKDEV\s0 [\s-1KBYTES\s0]
.Sp
Prepare \s-1BLOCKDEV\s0 to be used as swap partition
.Sp
.Vb 1
\&        \-L LBL  Label
.Ve
.IP "\fBmktemp\fR" 4
.IX Item "mktemp"
mktemp [\-dt] [\-p \s-1DIR\s0] [\s-1TEMPLATE\s0]
.Sp
Create a temporary file with name based on \s-1TEMPLATE\s0 and print its name.
\&\s-1TEMPLATE\s0 must end with \s-1XXXXXX \s0(e.g. [/dir/]nameXXXXXX).
Without \s-1TEMPLATE,\s0 \-t tmp.XXXXXX is assumed.
.Sp
.Vb 5
\&        \-d      Make directory, not file
\&        \-q      Fail silently on errors
\&        \-t      Prepend base directory name to TEMPLATE
\&        \-p DIR  Use DIR as a base directory (implies \-t)
\&        \-u      Do not create anything; print a name
.Ve
.Sp
Base directory is: \-p \s-1DIR,\s0 else \f(CW$TMPDIR\fR, else /tmp
.IP "\fBmodinfo\fR" 4
.IX Item "modinfo"
modinfo [\-adlpn0] [\-F keyword] \s-1MODULE\s0
.Sp
.Vb 6
\&        \-a              Shortcut for \*(Aq\-F author\*(Aq
\&        \-d              Shortcut for \*(Aq\-F description\*(Aq
\&        \-l              Shortcut for \*(Aq\-F license\*(Aq
\&        \-p              Shortcut for \*(Aq\-F parm\*(Aq
\&        \-F keyword      Keyword to look for
\&        \-0              Separate output with NULs
.Ve
.IP "\fBmodprobe\fR" 4
.IX Item "modprobe"
modprobe [\-rq] \s-1MODULE\s0 [SYMBOL=VALUE]...
.Sp
.Vb 2
\&        \-r      Remove MODULE
\&        \-q      Quiet
.Ve
.IP "\fBmore\fR" 4
.IX Item "more"
more [\s-1FILE\s0]...
.Sp
View \s-1FILE \s0(or stdin) one screenful at a time
.IP "\fBmount\fR" 4
.IX Item "mount"
mount [\s-1OPTIONS\s0] [\-o \s-1OPT\s0] \s-1DEVICE NODE\s0
.Sp
Mount a filesystem. Filesystem autodetection requires /proc.
.Sp
.Vb 10
\&        \-a              Mount all filesystems in fstab
\&        \-f              Dry run
\&        \-v              Verbose
\&        \-r              Read\-only mount
\&        \-t FSTYPE[,...] Filesystem type(s)
\&        \-T FILE         Read FILE instead of /etc/fstab
\&        \-O OPT          Mount only filesystems with option OPT (\-a only)
\&\-o OPT:
\&        loop            Ignored (loop devices are autodetected)
\&        [a]sync         Writes are [a]synchronous
\&        [no]atime       Disable/enable updates to inode access times
\&        [no]diratime    Disable/enable atime updates to directories
\&        [no]relatime    Disable/enable atime updates relative to modification time
\&        [no]dev         (Dis)allow use of special device files
\&        [no]exec        (Dis)allow use of executable files
\&        [no]suid        (Dis)allow set\-user\-id\-root programs
\&        [r]shared       Convert [recursively] to a shared subtree
\&        [r]slave        Convert [recursively] to a slave subtree
\&        [r]private      Convert [recursively] to a private subtree
\&        [un]bindable    Make mount point [un]able to be bind mounted
\&        [r]bind         Bind a file or directory [recursively] to another location
\&        move            Relocate an existing mount point
\&        remount         Remount a mounted filesystem, changing flags
\&        ro              Same as \-r
.Ve
.Sp
There are filesystem-specific \-o flags.
.IP "\fBmountpoint\fR" 4
.IX Item "mountpoint"
mountpoint [\-q] <[\-dn] \s-1DIR\s0 | \-x \s-1DEVICE\s0>
.Sp
Check if the directory is a mountpoint
.Sp
.Vb 4
\&        \-q      Quiet
\&        \-d      Print major/minor device number of the filesystem
\&        \-n      Print device name of the filesystem
\&        \-x      Print major/minor device number of the blockdevice
.Ve
.IP "\fBmt\fR" 4
.IX Item "mt"
mt [\-f device] opcode value
.Sp
Control magnetic tape drive operation
.Sp
Available Opcodes:
.Sp
bsf bsfm bsr bss datacompression drvbuffer eof eom erase
fsf fsfm fsr fss load lock mkpart nop offline ras1 ras2
ras3 reset retension rewind rewoffline seek setblk setdensity
setpart tell unload unlock weof wset
.IP "\fBmv\fR" 4
.IX Item "mv"
mv [\-fin] \s-1SOURCE DEST\s0
or: mv [\-fin] \s-1SOURCE... DIRECTORY\s0
.Sp
Rename \s-1SOURCE\s0 to \s-1DEST,\s0 or move \s-1SOURCE\s0(s) to \s-1DIRECTORY\s0
.Sp
.Vb 3
\&        \-f      Don\*(Aqt prompt before overwriting
\&        \-i      Interactive, prompt before overwrite
\&        \-n      Don\*(Aqt overwrite an existing file
.Ve
.IP "\fBnameif\fR" 4
.IX Item "nameif"
nameif [\-s] [\-c \s-1FILE\s0] [\s-1IFNAME SELECTOR\s0]...
.Sp
Rename network interface while it in the down state.
The device matched by \s-1SELECTOR\s0 is renamed to \s-1IFACE.
SELECTOR\s0 can be a combination of:
.Sp
.Vb 4
\&        driver=STRING
\&        bus=STRING
\&        phy_address=NUM
\&        [mac=]XX:XX:XX:XX:XX:XX
\&
\&        \-c FILE Configuration file (default: /etc/mactab)
\&        \-s      Log to syslog
.Ve
.IP "\fBnanddump\fR" 4
.IX Item "nanddump"
nanddump [\-no] [\-\-bb padbad|skipbad] [\-s \s-1ADDR\s0] [\-l \s-1LEN\s0] [\-f \s-1FILE\s0] \s-1MTD_DEVICE\s0
.Sp
Dump \s-1MTD_DEVICE\s0
.Sp
.Vb 8
\&        \-n      Read without ecc
\&        \-o      Dump oob data
\&        \-s ADDR Start address
\&        \-l LEN  Length
\&        \-f FILE Dump to file (\*(Aq\-\*(Aq for stdout)
\&        \-\-bb METHOD
\&                skipbad: skip bad blocks
\&                padbad: substitute bad blocks by 0xff (default)
.Ve
.IP "\fBnandwrite\fR" 4
.IX Item "nandwrite"
nandwrite [\-np] [\-s \s-1ADDR\s0] \s-1MTD_DEVICE\s0 [\s-1FILE\s0]
.Sp
Write to \s-1MTD_DEVICE\s0
.Sp
.Vb 3
\&        \-n      Write without ecc
\&        \-p      Pad to page size
\&        \-s ADDR Start address
.Ve
.IP "\fBnbd-client\fR" 4
.IX Item "nbd-client"
nbd-client \s-1HOST PORT BLOCKDEV\s0
.Sp
Connect to \s-1HOST\s0 and provide a network block device on \s-1BLOCKDEV\s0
.IP "\fBnc\fR" 4
.IX Item "nc"
nc [\-iN] [\-wN] [\-l] [\-p \s-1PORT\s0] [\-f FILE|IPADDR \s-1PORT\s0] [\-e \s-1PROG\s0]
.Sp
Open a pipe to \s-1IP:PORT\s0 or \s-1FILE\s0
.Sp
.Vb 7
\&        \-l      Listen mode, for inbound connects
\&                (use \-ll with \-e for persistent server)
\&        \-p PORT Local port
\&        \-w SEC  Connect timeout
\&        \-i SEC  Delay interval for lines sent
\&        \-f FILE Use file (ala /dev/ttyS0) instead of network
\&        \-e PROG Run PROG after connect
.Ve
.IP "\fBnetstat\fR" 4
.IX Item "netstat"
netstat [\-ral] [\-tuwx] [\-enWp]
.Sp
Display networking information
.Sp
.Vb 10
\&        \-r      Routing table
\&        \-a      All sockets
\&        \-l      Listening sockets
\&                Else: connected sockets
\&        \-t      TCP sockets
\&        \-u      UDP sockets
\&        \-w      Raw sockets
\&        \-x      Unix sockets
\&                Else: all socket types
\&        \-e      Other/more information
\&        \-n      Don\*(Aqt resolve names
\&        \-W      Wide display
\&        \-p      Show PID/program name for sockets
.Ve
.IP "\fBnice\fR" 4
.IX Item "nice"
nice [\-n \s-1ADJUST\s0] [\s-1PROG ARGS\s0]
.Sp
Change scheduling priority, run \s-1PROG\s0
.Sp
.Vb 1
\&        \-n ADJUST       Adjust priority by ADJUST
.Ve
.IP "\fBnl\fR" 4
.IX Item "nl"
nl [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Write FILEs to standard output with line numbers added
.Sp
.Vb 5
\&        \-b STYLE        Which lines to number \- a: all, t: nonempty, n: none
\&        \-i N            Line number increment
\&        \-s STRING       Use STRING as line number separator
\&        \-v N            Start from N
\&        \-w N            Width of line numbers
.Ve
.IP "\fBnohup\fR" 4
.IX Item "nohup"
nohup \s-1PROG ARGS\s0
.Sp
Run \s-1PROG\s0 immune to hangups, with output to a non-tty
.IP "\fBnproc\fR" 4
.IX Item "nproc"
nproc
.Sp
Print number of CPUs
.IP "\fBnsenter\fR" 4
.IX Item "nsenter"
nsenter [\s-1OPTIONS\s0] [\s-1PROG\s0 [\s-1ARGS\s0]]
.Sp
.Vb 10
\&        \-t,\-\-target PID         Target process to get namespaces from
\&        \-m,\-\-mount[=FILE]       Enter mount namespace
\&        \-u,\-\-uts[=FILE]         Enter UTS namespace (hostname etc)
\&        \-i,\-\-ipc[=FILE]         Enter System V IPC namespace
\&        \-n,\-\-net[=FILE]         Enter network namespace
\&        \-p,\-\-pid[=FILE]         Enter pid namespace
\&        \-U,\-\-user[=FILE]        Enter user namespace
\&        \-S,\-\-setuid UID         Set uid in entered namespace
\&        \-G,\-\-setgid GID         Set gid in entered namespace
\&        \-\-preserve\-credentials  Don\*(Aqt touch uids or gids
\&        \-r,\-\-root[=DIR]         Set root directory
\&        \-w,\-\-wd[=DIR]           Set working directory
\&        \-F,\-\-no\-fork            Don\*(Aqt fork before exec\*(Aqing PROG
.Ve
.IP "\fBnslookup\fR" 4
.IX Item "nslookup"
nslookup [\s-1HOST\s0] [\s-1SERVER\s0]
.Sp
Query the nameserver for the \s-1IP\s0 address of the given \s-1HOST\s0
optionally using a specified \s-1DNS\s0 server
.IP "\fBntpd\fR" 4
.IX Item "ntpd"
ntpd [\-dnqNwl \-I \s-1IFACE\s0] [\-S \s-1PROG\s0] [\-p \s-1PEER\s0]...
.Sp
\&\s-1NTP\s0 client/server
.Sp
.Vb 11
\&        \-d      Verbose
\&        \-n      Do not daemonize
\&        \-q      Quit after clock is set
\&        \-N      Run at high priority
\&        \-w      Do not set time (only query peers), implies \-n
\&        \-S PROG Run PROG after stepping time, stratum change, and every 11 mins
\&        \-p PEER Obtain time from PEER (may be repeated)
\&                If \-p is not given, \*(Aqserver HOST\*(Aq lines
\&                from /etc/ntp.conf are used
\&        \-l      Also run as server on port 123
\&        \-I IFACE Bind server to IFACE, implies \-l
.Ve
.IP "\fBod\fR" 4
.IX Item "od"
od [\-abcdfhilovxs] [\-t \s-1TYPE\s0] [\-A \s-1RADIX\s0] [\-N \s-1SIZE\s0] [\-j \s-1SKIP\s0] [\-S \s-1MINSTR\s0] [\-w \s-1WIDTH\s0] [\s-1FILE\s0]...
.Sp
Print FILEs (or stdin) unambiguously, as octal bytes by default
.IP "\fBpartprobe\fR" 4
.IX Item "partprobe"
partprobe \s-1DEVICE...\s0
.Sp
Ask kernel to rescan partition table
.IP "\fBpaste\fR" 4
.IX Item "paste"
paste [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Paste lines from each input file, separated with tab
.Sp
.Vb 2
\&        \-d LIST Use delimiters from LIST, not tab
\&        \-s      Serial: one file at a time
.Ve
.IP "\fBping\fR" 4
.IX Item "ping"
ping [\s-1OPTIONS\s0] \s-1HOST\s0
.Sp
Send \s-1ICMP ECHO_REQUEST\s0 packets to network hosts
.Sp
.Vb 11
\&        \-c CNT          Send only CNT pings
\&        \-s SIZE         Send SIZE data bytes in packets (default 56)
\&        \-t TTL          Set TTL
\&        \-I IFACE/IP     Source interface or IP address
\&        \-W SEC          Seconds to wait for the first response (default 10)
\&                        (after all \-c CNT packets are sent)
\&        \-w SEC          Seconds until ping exits (default:infinite)
\&                        (can exit earlier with \-c CNT)
\&        \-q              Quiet, only display output at start
\&                        and when finished
\&        \-p              Pattern to use for payload
.Ve
.IP "\fBpivot_root\fR" 4
.IX Item "pivot_root"
pivot_root \s-1NEW_ROOT PUT_OLD\s0
.Sp
Move the current root file system to \s-1PUT_OLD\s0 and make \s-1NEW_ROOT\s0
the new root file system
.IP "\fBpoweroff\fR" 4
.IX Item "poweroff"
poweroff [\-d \s-1DELAY\s0] [\-n] [\-f]
.Sp
Halt and shut off power
.Sp
.Vb 3
\&        \-d SEC  Delay interval
\&        \-n      Do not sync
\&        \-f      Force (don\*(Aqt go through init)
.Ve
.IP "\fBprintenv\fR" 4
.IX Item "printenv"
printenv [\s-1VARIABLE\s0]...
.Sp
Print environment VARIABLEs.
If no \s-1VARIABLE\s0 specified, print all.
.IP "\fBprintf\fR" 4
.IX Item "printf"
printf \s-1FORMAT\s0 [\s-1ARG\s0]...
.Sp
Format and print \s-1ARG\s0(s) according to \s-1FORMAT \s0(a\-la C printf)
.IP "\fBps\fR" 4
.IX Item "ps"
ps [\-o \s-1COL1\s0,COL2=HEADER]
.Sp
Show list of processes
.Sp
.Vb 1
\&        \-o COL1,COL2=HEADER     Select columns for display
.Ve
.IP "\fBpscan\fR" 4
.IX Item "pscan"
pscan [\-cb] [\-p \s-1MIN_PORT\s0] [\-P \s-1MAX_PORT\s0] [\-t \s-1TIMEOUT\s0] [\-T \s-1MIN_RTT\s0] \s-1HOST\s0
.Sp
Scan a host, print all open ports
.Sp
.Vb 6
\&        \-c      Show closed ports too
\&        \-b      Show blocked ports too
\&        \-p      Scan from this port (default 1)
\&        \-P      Scan up to this port (default 1024)
\&        \-t      Timeout (default 5000 ms)
\&        \-T      Minimum rtt (default 5 ms, increase for congested hosts)
.Ve
.IP "\fBpwd\fR" 4
.IX Item "pwd"
pwd
.Sp
Print the full filename of the current working directory
.IP "\fBraidautorun\fR" 4
.IX Item "raidautorun"
raidautorun \s-1DEVICE\s0
.Sp
Tell the kernel to automatically search and start \s-1RAID\s0 arrays
.IP "\fBrdate\fR" 4
.IX Item "rdate"
rdate [\-s/\-p] \s-1HOST\s0
.Sp
Set and print time from \s-1HOST\s0 using \s-1RFC 868\s0
.Sp
.Vb 2
\&        \-s      Only set system time
\&        \-p      Only print time
.Ve
.IP "\fBrdev\fR" 4
.IX Item "rdev"
rdev
.Sp
Print the device node associated with the filesystem mounted at '/'
.IP "\fBreadahead\fR" 4
.IX Item "readahead"
readahead [\s-1FILE\s0]...
.Sp
Preload FILEs to \s-1RAM\s0
.IP "\fBreadlink\fR" 4
.IX Item "readlink"
readlink [\-fnv] \s-1FILE\s0
.Sp
Display the value of a symlink
.Sp
.Vb 3
\&        \-f      Canonicalize by following all symlinks
\&        \-n      Don\*(Aqt add newline
\&        \-v      Verbose
.Ve
.IP "\fBreadprofile\fR" 4
.IX Item "readprofile"
readprofile [\s-1OPTIONS\s0]
.Sp
.Vb 10
\&        \-m mapfile      (Default: /boot/System.map)
\&        \-p profile      (Default: /proc/profile)
\&        \-M NUM          Set the profiling multiplier to NUM
\&        \-i              Print only info about the sampling step
\&        \-v              Verbose
\&        \-a              Print all symbols, even if count is 0
\&        \-b              Print individual histogram\-bin counts
\&        \-s              Print individual counters within functions
\&        \-r              Reset all the counters (root only)
\&        \-n              Disable byte order auto\-detection
.Ve
.IP "\fBrealpath\fR" 4
.IX Item "realpath"
realpath \s-1FILE...\s0
.Sp
Return the absolute pathnames of given \s-1FILE\s0
.IP "\fBreboot\fR" 4
.IX Item "reboot"
reboot [\-d \s-1DELAY\s0] [\-n] [\-f]
.Sp
Reboot the system
.Sp
.Vb 3
\&        \-d SEC  Delay interval
\&        \-n      Do not sync
\&        \-f      Force (don\*(Aqt go through init)
.Ve
.IP "\fBrenice\fR" 4
.IX Item "renice"
renice [\-n] \s-1PRIORITY\s0 [[\-p | \-g | \-u] \s-1ID...\s0]...
.Sp
Change scheduling priority of a running process
.Sp
.Vb 5
\&        \-n      Add PRIORITY to current nice value
\&                Without \-n, nice value is set to PRIORITY
\&        \-p      Process ids (default)
\&        \-g      Process group ids
\&        \-u      Process user names
.Ve
.IP "\fBrev\fR" 4
.IX Item "rev"
rev [\s-1FILE\s0]...
.Sp
Reverse lines of \s-1FILE\s0
.IP "\fBrm\fR" 4
.IX Item "rm"
rm [\-irf] \s-1FILE...\s0
.Sp
Remove (unlink) FILEs
.Sp
.Vb 3
\&        \-i      Always prompt before removing
\&        \-f      Never prompt
\&        \-R,\-r   Recurse
.Ve
.IP "\fBrmdir\fR" 4
.IX Item "rmdir"
rmdir [\s-1OPTIONS\s0] \s-1DIRECTORY...\s0
.Sp
Remove \s-1DIRECTORY\s0 if it is empty
.Sp
.Vb 2
\&        \-p|\-\-parents    Include parents
\&        \-\-ignore\-fail\-on\-non\-empty
.Ve
.IP "\fBrmmod\fR" 4
.IX Item "rmmod"
rmmod \s-1MODULE...\s0
.Sp
Unload kernel modules
.IP "\fBroute\fR" 4
.IX Item "route"
route [{add|del|delete}]
.Sp
Edit kernel routing tables
.Sp
.Vb 3
\&        \-n      Don\*(Aqt resolve names
\&        \-e      Display other/more information
\&        \-A inet Select address family
.Ve
.IP "\fBrtcwake\fR" 4
.IX Item "rtcwake"
rtcwake [\-a | \-l | \-u] [\-d \s-1DEV\s0] [\-m \s-1MODE\s0] [\-s \s-1SEC\s0 | \-t \s-1TIME\s0]
.Sp
Enter a system sleep state until specified wakeup time
.Sp
.Vb 7
\&        \-a,\-\-auto       Read clock mode from adjtime
\&        \-l,\-\-local      Clock is set to local time
\&        \-u,\-\-utc        Clock is set to UTC time
\&        \-d,\-\-device DEV Specify the RTC device
\&        \-m,\-\-mode MODE  Set sleep state (default: standby)
\&        \-s,\-\-seconds SEC Set timeout in SEC seconds from now
\&        \-t,\-\-time TIME  Set timeout to TIME seconds from epoch
.Ve
.IP "\fBrx\fR" 4
.IX Item "rx"
rx \s-1FILE\s0
.Sp
Receive a file using the xmodem protocol
.IP "\fBscript\fR" 4
.IX Item "script"
script [\-afqt] [\-c \s-1PROG\s0] [\s-1OUTFILE\s0]
.Sp
.Vb 5
\&        \-a      Append output
\&        \-c PROG Run PROG, not shell
\&        \-f      Flush output after each write
\&        \-q      Quiet
\&        \-t      Send timing to stderr
.Ve
.IP "\fBscriptreplay\fR" 4
.IX Item "scriptreplay"
scriptreplay timingfile [typescript [divisor]]
.Sp
Play back typescripts, using timing information
.IP "\fBsed\fR" 4
.IX Item "sed"
sed [\-inrE] [\-f \s-1FILE\s0]... [\-e \s-1CMD\s0]... [\s-1FILE\s0]...
or: sed [\-inrE] \s-1CMD\s0 [\s-1FILE\s0]...
.Sp
.Vb 6
\&        \-e CMD  Add CMD to sed commands to be executed
\&        \-f FILE Add FILE contents to sed commands to be executed
\&        \-i[SFX] Edit files in\-place (otherwise sends to stdout)
\&                Optionally back files up, appending SFX
\&        \-n      Suppress automatic printing of pattern space
\&        \-r,\-E   Use extended regex syntax
.Ve
.Sp
If no \-e or \-f, the first non-option argument is the sed command string.
Remaining arguments are input files (stdin if none).
.IP "\fBseq\fR" 4
.IX Item "seq"
seq [\-w] [\-s \s-1SEP\s0] [\s-1FIRST\s0 [\s-1INC\s0]] \s-1LAST\s0
.Sp
Print numbers from \s-1FIRST\s0 to \s-1LAST,\s0 in steps of \s-1INC.
FIRST, INC\s0 default to 1.
.Sp
.Vb 2
\&        \-w      Pad to last with leading zeros
\&        \-s SEP  String separator
.Ve
.IP "\fBsetpriv\fR" 4
.IX Item "setpriv"
setpriv [\s-1OPTIONS\s0] \s-1PROG\s0 [\s-1ARGS\s0]
.Sp
Run \s-1PROG\s0 with different privilege settings
.Sp
\&\-\-nnp,\-\-no\-new\-privs	Ignore setuid/setgid bits and file capabilities
.IP "\fBsetserial\fR" 4
.IX Item "setserial"
setserial [\-gabGvzV] \s-1DEVICE\s0 [\s-1PARAMETER\s0 [\s-1ARG\s0]]...
.Sp
Request or set Linux serial port information
.Sp
.Vb 7
\&        \-g      Interpret parameters as list of devices for reporting
\&        \-a      Print all available information
\&        \-b      Print summary information
\&        \-G      Print in form which can be fed back
\&                to setserial as command line parameters
\&        \-z      Zero out serial flags before setting
\&        \-v      Verbose
.Ve
.Sp
Parameters: (* = takes an argument, ^ = can be turned off by preceding ^)
	*port, *irq, *divisor, *uart, *baud_base, *close_delay, *closing_wait,
	^fourport, ^auto_irq, ^skip_test, ^sak, ^session_lockout, ^pgrp_lockout,
	^callout_nohup, ^split_termios, ^hup_notify, ^low_latency, autoconfig,
	spd_normal, spd_hi, spd_vhi, spd_shi, spd_warp, spd_cust
.Sp
\&\s-1UART\s0 types:
.Sp
.Vb 3
\&        unknown, 8250, 16450, 16550, 16550A, Cirrus, 16650, 16650V2, 16750,
\&        16950, 16954, 16654, 16850, RSA, NS16550A, XSCALE, RM9000, OCTEON, AR7,
\&        U6_16550A
.Ve
.IP "\fBsetsid\fR" 4
.IX Item "setsid"
setsid [\-c] \s-1PROG ARGS\s0
.Sp
Run \s-1PROG\s0 in a new session. \s-1PROG\s0 will have no controlling terminal
and will not be affected by keyboard signals (^C etc).
.Sp
.Vb 1
\&        \-c      Set controlling terminal to stdin
.Ve
.IP "\fBsh\fR" 4
.IX Item "sh"
sh [\-/+OPTIONS] [\-/+o \s-1OPT\s0]... [\-c '\s-1SCRIPT\s0' [\s-1ARG0\s0 [\s-1ARGS\s0]] / \s-1FILE\s0 [\s-1ARGS\s0]]
.Sp
Unix shell interpreter
.IP "\fBshred\fR" 4
.IX Item "shred"
shred \s-1FILE...\s0
.Sp
Overwrite/delete FILEs
.Sp
.Vb 4
\&        \-f      Chmod to ensure writability
\&        \-n N    Overwrite N times (default 3)
\&        \-z      Final overwrite with zeros
\&        \-u      Remove file
.Ve
.IP "\fBshuf\fR" 4
.IX Item "shuf"
shuf [\-e|\-i L\-H] [\-n \s-1NUM\s0] [\-o \s-1FILE\s0] [\-z] [FILE|ARG...]
.Sp
Randomly permute lines
.Sp
.Vb 5
\&        \-e      Treat ARGs as lines
\&        \-i L\-H  Treat numbers L\-H as lines
\&        \-n NUM  Output at most NUM lines
\&        \-o FILE Write to FILE, not standard output
\&        \-z      End lines with zero byte, not newline
.Ve
.IP "\fBslattach\fR" 4
.IX Item "slattach"
slattach [\-cehmLF] [\-s \s-1SPEED\s0] [\-p \s-1PROTOCOL\s0] \s-1DEVICE\s0
.Sp
Attach network interface(s) to serial line(s)
.Sp
.Vb 8
\&        \-p PROT Set protocol (slip, cslip, slip6, clisp6 or adaptive)
\&        \-s SPD  Set line speed
\&        \-e      Exit after initializing device
\&        \-h      Exit when the carrier is lost
\&        \-c PROG Run PROG when the line is hung up
\&        \-m      Do NOT initialize the line in raw 8 bits mode
\&        \-L      Enable 3\-wire operation
\&        \-F      Disable RTS/CTS flow control
.Ve
.IP "\fBsleep\fR" 4
.IX Item "sleep"
sleep [N]...
.Sp
Pause for a time equal to the total of the args given, where each arg can
have an optional suffix of (s)econds, (m)inutes, (h)ours, or (d)ays
.IP "\fBsort\fR" 4
.IX Item "sort"
sort [\-nrugMcszbdfiokt] [\-o \s-1FILE\s0] [\-k start[.offset][opts][,end[.offset][opts]] [\-t \s-1CHAR\s0] [\s-1FILE\s0]...
.Sp
Sort lines of text
.Sp
.Vb 10
\&        \-o FILE Output to FILE
\&        \-c      Check whether input is sorted
\&        \-b      Ignore leading blanks
\&        \-f      Ignore case
\&        \-i      Ignore unprintable characters
\&        \-d      Dictionary order (blank or alphanumeric only)
\&        \-g      General numerical sort
\&        \-M      Sort month
\&        \-n      Sort numbers
\&        \-t CHAR Field separator
\&        \-k N[,M] Sort by Nth field
\&        \-r      Reverse sort order
\&        \-s      Stable (don\*(Aqt sort ties alphabetically)
\&        \-u      Suppress duplicate lines
\&        \-z      Lines are terminated by NUL, not newline
.Ve
.IP "\fBsplit\fR" 4
.IX Item "split"
split [\s-1OPTIONS\s0] [\s-1INPUT\s0 [\s-1PREFIX\s0]]
.Sp
.Vb 3
\&        \-b N[k|m]       Split by N (kilo|mega)bytes
\&        \-l N            Split by N lines
\&        \-a N            Use N letters as suffix
.Ve
.IP "\fBssl_client\fR" 4
.IX Item "ssl_client"
ssl_client \-s \s-1FD\s0 [\-r \s-1FD\s0] [\-n \s-1SNI\s0]
.IP "\fBstat\fR" 4
.IX Item "stat"
stat [\s-1OPTIONS\s0] \s-1FILE...\s0
.Sp
Display file (default) or filesystem status
.Sp
.Vb 4
\&        \-c FMT  Use the specified format
\&        \-f      Display filesystem status
\&        \-L      Follow links
\&        \-t      Terse display
.Ve
.Sp
\&\s-1FMT\s0 sequences for files:
.Sp
.Vb 10
\& %a     Access rights in octal
\& %A     Access rights in human readable form
\& %b     Number of blocks allocated (see %B)
\& %B     Size in bytes of each block reported by %b
\& %d     Device number in decimal
\& %D     Device number in hex
\& %f     Raw mode in hex
\& %F     File type
\& %g     Group ID
\& %G     Group name
\& %h     Number of hard links
\& %i     Inode number
\& %n     File name
\& %N     File name, with \-> TARGET if symlink
\& %o     I/O block size
\& %s     Total size in bytes
\& %t     Major device type in hex
\& %T     Minor device type in hex
\& %u     User ID
\& %U     User name
\& %x     Time of last access
\& %X     Time of last access as seconds since Epoch
\& %y     Time of last modification
\& %Y     Time of last modification as seconds since Epoch
\& %z     Time of last change
\& %Z     Time of last change as seconds since Epoch
.Ve
.Sp
\&\s-1FMT\s0 sequences for file systems:
.Sp
.Vb 12
\& %a     Free blocks available to non\-superuser
\& %b     Total data blocks
\& %c     Total file nodes
\& %d     Free file nodes
\& %f     Free blocks
\& %i     File System ID in hex
\& %l     Maximum length of filenames
\& %n     File name
\& %s     Block size (for faster transfer)
\& %S     Fundamental block size (for block counts)
\& %t     Type in hex
\& %T     Type in human readable form
.Ve
.IP "\fBstrings\fR" 4
.IX Item "strings"
strings [\-fo] [\-t o/d/x] [\-n \s-1LEN\s0] [\s-1FILE\s0]...
.Sp
Display printable strings in a binary file
.Sp
.Vb 4
\&        \-f              Precede strings with filenames
\&        \-o              Precede strings with octal offsets
\&        \-t o/d/x        Precede strings with offsets in base 8/10/16
\&        \-n LEN          At least LEN characters form a string (default 4)
.Ve
.IP "\fBstty\fR" 4
.IX Item "stty"
stty [\-a|g] [\-F \s-1DEVICE\s0] [\s-1SETTING\s0]...
.Sp
Without arguments, prints baud rate, line discipline,
and deviations from stty sane
.Sp
.Vb 4
\&        \-F DEVICE       Open device instead of stdin
\&        \-a              Print all current settings in human\-readable form
\&        \-g              Print in stty\-readable form
\&        [SETTING]       See manpage
.Ve
.IP "\fBsum\fR" 4
.IX Item "sum"
sum [\-rs] [\s-1FILE\s0]...
.Sp
Checksum and count the blocks in a file
.Sp
.Vb 2
\&        \-r      Use BSD sum algorithm (1K blocks)
\&        \-s      Use System V sum algorithm (512byte blocks)
.Ve
.IP "\fBswitch_root\fR" 4
.IX Item "switch_root"
switch_root [\-c /dev/console] \s-1NEW_ROOT NEW_INIT\s0 [\s-1ARGS\s0]
.Sp
Free initramfs and switch to another root fs:
.Sp
chroot to \s-1NEW_ROOT,\s0 delete all in /, move \s-1NEW_ROOT\s0 to /,
execute \s-1NEW_INIT. PID\s0 must be 1. \s-1NEW_ROOT\s0 must be a mountpoint.
.Sp
.Vb 1
\&        \-c DEV  Reopen stdio to DEV after switch
.Ve
.IP "\fBsync\fR" 4
.IX Item "sync"
sync [\-df] [\s-1FILE\s0]...
.Sp
Write all buffered blocks (in FILEs) to disk
	\-d	Avoid syncing metadata
	\-f	Sync filesystems underlying FILEs
.IP "\fBsyslogd\fR" 4
.IX Item "syslogd"
syslogd [\s-1OPTIONS\s0]
.Sp
System logging utility
.Sp
.Vb 12
\&        \-n              Run in foreground
\&        \-R HOST[:PORT]  Log to HOST:PORT (default PORT:514)
\&        \-L              Log locally and via network (default is network only if \-R)
\&        \-C[size_kb]     Log to shared mem buffer (use logread to read it)
\&        \-K              Log to kernel printk buffer (use dmesg to read it)
\&        \-O FILE         Log to FILE (default: /var/log/messages, stdout if \-)
\&        \-s SIZE         Max size (KB) before rotation (default 200KB, 0=off)
\&        \-b N            N rotated logs to keep (default 1, max 99, 0=purge)
\&        \-l N            Log only messages more urgent than prio N (1\-8)
\&        \-S              Smaller output
\&        \-D              Drop duplicates
\&        \-f FILE         Use FILE as config (default:/etc/syslog.conf)
.Ve
.IP "\fBtac\fR" 4
.IX Item "tac"
tac [\s-1FILE\s0]...
.Sp
Concatenate FILEs and print them in reverse
.IP "\fBtail\fR" 4
.IX Item "tail"
tail [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Print last 10 lines of each \s-1FILE \s0(or stdin) to stdout.
With more than one \s-1FILE,\s0 precede each with a filename header.
.Sp
.Vb 4
\&        \-f              Print data as file grows
\&        \-c [+]N[kbm]    Print last N bytes
\&        \-n N[kbm]       Print last N lines
\&        \-n +N[kbm]      Start on Nth line and print the rest
.Ve
.IP "\fBtaskset\fR" 4
.IX Item "taskset"
taskset [\-p] [\s-1HEXMASK\s0] \s-1PID\s0 | \s-1PROG ARGS\s0
.Sp
Set or get \s-1CPU\s0 affinity
.Sp
.Vb 1
\&        \-p      Operate on an existing PID
.Ve
.IP "\fBtcpsvd\fR" 4
.IX Item "tcpsvd"
tcpsvd [\-hEv] [\-c N] [\-C N[:MSG]] [\-b N] [\-u \s-1USER\s0] [\-l \s-1NAME\s0] \s-1IP PORT PROG\s0
.Sp
Create \s-1TCP\s0 socket, bind to \s-1IP:PORT\s0 and listen for incoming connections.
Run \s-1PROG\s0 for each connection.
.Sp
.Vb 12
\&        IP PORT         IP:PORT to listen on
\&        PROG ARGS       Program to run
\&        \-u USER[:GRP]   Change to user/group after bind
\&        \-c N            Up to N connections simultaneously (default 30)
\&        \-b N            Allow backlog of approximately N TCP SYNs (default 20)
\&        \-C N[:MSG]      Allow only up to N connections from the same IP:
\&                        new connections from this IP address are closed
\&                        immediately, MSG is written to the peer before close
\&        \-E              Don\*(Aqt set up environment
\&        \-h              Look up peer\*(Aqs hostname
\&        \-l NAME         Local hostname (else look up local hostname in DNS)
\&        \-v              Verbose
.Ve
.Sp
Environment if no \-E:
PROTO='\s-1TCP\s0'
TCPREMOTEADDR='ip:port'
TCPLOCALADDR='ip:port'
TCPORIGDSTADDR='ip:port' of destination before firewall
	Useful for REDIRECTed-to-local connections:
	iptables \-t nat \-A \s-1PREROUTING\s0 \-p tcp \-\-dport 80 \-j \s-1REDIRECT\s0 \-\-to 8080
TCPCONCURRENCY=num_of_connects_from_this_ip
If \-h:
TCPLOCALHOST='hostname' (\-l \s-1NAME\s0 is used if specified)
TCPREMOTEHOST='hostname'
.IP "\fBtee\fR" 4
.IX Item "tee"
tee [\-ai] [\s-1FILE\s0]...
.Sp
Copy stdin to each \s-1FILE,\s0 and also to stdout
.Sp
.Vb 2
\&        \-a      Append to the given FILEs, don\*(Aqt overwrite
\&        \-i      Ignore interrupt signals (SIGINT)
.Ve
.IP "\fBtelnet\fR" 4
.IX Item "telnet"
telnet [\-a] [\-l \s-1USER\s0] \s-1HOST\s0 [\s-1PORT\s0]
.Sp
Connect to telnet server
.Sp
.Vb 2
\&        \-a      Automatic login with $USER variable
\&        \-l USER Automatic login as USER
.Ve
.IP "\fBtelnetd\fR" 4
.IX Item "telnetd"
telnetd [\s-1OPTIONS\s0]
.Sp
Handle incoming telnet connections
.Sp
.Vb 10
\&        \-l LOGIN        Exec LOGIN on connect
\&        \-f ISSUE_FILE   Display ISSUE_FILE instead of /etc/issue
\&        \-K              Close connection as soon as login exits
\&                        (normally wait until all programs close slave pty)
\&        \-p PORT         Port to listen on
\&        \-b ADDR[:PORT]  Address to bind to
\&        \-F              Run in foreground
\&        \-i              Inetd mode
\&        \-w SEC          Inetd \*(Aqwait\*(Aq mode, linger time SEC
\&        \-S              Log to syslog (implied by \-i or without \-F and \-w)
.Ve
.IP "\fBtftp\fR" 4
.IX Item "tftp"
tftp [\s-1OPTIONS\s0] \s-1HOST\s0 [\s-1PORT\s0]
.Sp
Transfer a file from/to tftp server
.Sp
.Vb 5
\&        \-l FILE Local FILE
\&        \-r FILE Remote FILE
\&        \-g      Get file
\&        \-p      Put file
\&        \-b SIZE Transfer blocks of SIZE octets
.Ve
.IP "\fBtftpd\fR" 4
.IX Item "tftpd"
tftpd [\-cr] [\-u \s-1USER\s0] [\s-1DIR\s0]
.Sp
Transfer a file on tftp client's request
.Sp
tftpd should be used as an inetd service.
tftpd's line for inetd.conf:
	69 dgram udp nowait root tftpd tftpd \-l /files/to/serve
It also can be ran from udpsvd:
.Sp
.Vb 1
\&        udpsvd \-vE 0.0.0.0 69 tftpd /files/to/serve
\&
\&        \-r      Prohibit upload
\&        \-c      Allow file creation via upload
\&        \-u      Access files as USER
\&        \-l      Log to syslog (inetd mode requires this)
.Ve
.IP "\fBtime\fR" 4
.IX Item "time"
time [\-vpa] [\-o \s-1FILE\s0] \s-1PROG ARGS\s0
.Sp
Run \s-1PROG,\s0 display resource usage when it exits
.Sp
.Vb 5
\&        \-v      Verbose
\&        \-p      POSIX output format
\&        \-f FMT  Custom format
\&        \-o FILE Write result to FILE
\&        \-a      Append (else overwrite)
.Ve
.IP "\fBtimeout\fR" 4
.IX Item "timeout"
timeout [\-t \s-1SECS\s0] [\-s \s-1SIG\s0] \s-1PROG ARGS\s0
.Sp
Runs \s-1PROG.\s0 Sends \s-1SIG\s0 to it if it is not gone in \s-1SECS\s0 seconds.
Defaults: \s-1SECS: 10, SIG: TERM.\s0
.IP "\fBtop\fR" 4
.IX Item "top"
top [\-b] [\-nCOUNT] [\-dSECONDS]
.Sp
Provide a view of process activity in real time.
Read the status of all processes from /proc each \s-1SECONDS\s0
and display a screenful of them.
.Sp
.Vb 3
\&        \-b      Batch mode
\&        \-n N    Exit after N iterations
\&        \-d N    Delay between updates
.Ve
.IP "\fBtouch\fR" 4
.IX Item "touch"
touch [\-c] [\-d \s-1DATE\s0] [\-t \s-1DATE\s0] [\-r \s-1FILE\s0] \s-1FILE...\s0
.Sp
Update the last-modified date on the given FILE[s]
.Sp
.Vb 5
\&        \-c      Don\*(Aqt create files
\&        \-h      Don\*(Aqt follow links
\&        \-d DT   Date/time to use
\&        \-t DT   Date/time to use
\&        \-r FILE Use FILE\*(Aqs date/time
.Ve
.IP "\fBtr\fR" 4
.IX Item "tr"
tr [\-cds] \s-1STRING1\s0 [\s-1STRING2\s0]
.Sp
Translate, squeeze, or delete characters from stdin, writing to stdout
.Sp
.Vb 3
\&        \-c      Take complement of STRING1
\&        \-d      Delete input characters coded STRING1
\&        \-s      Squeeze multiple output characters of STRING2 into one character
.Ve
.IP "\fBtraceroute\fR" 4
.IX Item "traceroute"
traceroute [\-FIlnrv] [\-f 1ST_TTL] [\-m \s-1MAXTTL\s0] [\-q \s-1PROBES\s0] [\-p \s-1PORT\s0]
	[\-t \s-1TOS\s0] [\-w \s-1WAIT_SEC\s0] [\-s \s-1SRC_IP\s0] [\-i \s-1IFACE\s0]
	[\-z \s-1PAUSE_MSEC\s0] \s-1HOST\s0 [\s-1BYTES\s0]
.Sp
Trace the route to \s-1HOST\s0
.Sp
.Vb 10
\&        \-F      Set don\*(Aqt fragment bit
\&        \-I      Use ICMP ECHO instead of UDP datagrams
\&        \-l      Display TTL value of the returned packet
\&        \-n      Print numeric addresses
\&        \-r      Bypass routing tables, send directly to HOST
\&        \-v      Verbose
\&        \-f N    First number of hops (default 1)
\&        \-m N    Max number of hops
\&        \-q N    Number of probes per hop (default 3)
\&        \-p N    Base UDP port number used in probes
\&                (default 33434)
\&        \-s IP   Source address
\&        \-i IFACE Source interface
\&        \-t N    Type\-of\-service in probe packets (default 0)
\&        \-w SEC  Time to wait for a response (default 3)
\&        \-g IP   Loose source route gateway (8 max)
.Ve
.IP "\fBtruncate\fR" 4
.IX Item "truncate"
truncate [\-c] \-s \s-1SIZE FILE...\s0
.Sp
Truncate FILEs to the given size
.Sp
.Vb 2
\&        \-c      Do not create files
\&        \-s SIZE Truncate to SIZE
.Ve
.IP "\fBtty\fR" 4
.IX Item "tty"
tty
.Sp
Print file name of stdin's terminal
.Sp
.Vb 1
\&        \-s      Print nothing, only return exit status
.Ve
.IP "\fBttysize\fR" 4
.IX Item "ttysize"
ttysize [w] [h]
.Sp
Print dimension(s) of stdin's terminal, on error return 80x25
.IP "\fBtunctl\fR" 4
.IX Item "tunctl"
tunctl [\-f device] ([\-t name] | \-d name) [\-u owner] [\-g group] [\-b]
.Sp
Create or delete tun interfaces
.Sp
.Vb 6
\&        \-f name         tun device (/dev/net/tun)
\&        \-t name         Create iface \*(Aqname\*(Aq
\&        \-d name         Delete iface \*(Aqname\*(Aq
\&        \-u owner        Set iface owner
\&        \-g group        Set iface group
\&        \-b              Brief output
.Ve
.IP "\fBubiattach\fR" 4
.IX Item "ubiattach"
ubiattach \-m \s-1MTD_NUM\s0 [\-d \s-1UBI_NUM\s0] [\-O \s-1VID_HDR_OFF\s0] \s-1UBI_CTRL_DEV\s0
.Sp
Attach \s-1MTD\s0 device to \s-1UBI\s0
.Sp
.Vb 3
\&        \-m MTD_NUM      MTD device number to attach
\&        \-d UBI_NUM      UBI device number to assign
\&        \-O VID_HDR_OFF  VID header offset
.Ve
.IP "\fBubidetach\fR" 4
.IX Item "ubidetach"
ubidetach \-d \s-1UBI_NUM UBI_CTRL_DEV\s0
.Sp
Detach \s-1MTD\s0 device from \s-1UBI\s0
.Sp
.Vb 1
\&        \-d UBI_NUM      UBI device number
.Ve
.IP "\fBubimkvol\fR" 4
.IX Item "ubimkvol"
ubimkvol \-N \s-1NAME\s0 [\-s \s-1SIZE\s0 | \-m] \s-1UBI_DEVICE\s0
.Sp
Create \s-1UBI\s0 volume
.Sp
.Vb 7
\&        \-a ALIGNMENT    Volume alignment (default 1)
\&        \-m              Set volume size to maximum available
\&        \-n VOLID        Volume ID. If not specified,
\&                        assigned automatically
\&        \-N NAME         Volume name
\&        \-s SIZE         Size in bytes
\&        \-t TYPE         Volume type (static|dynamic)
.Ve
.IP "\fBubirename\fR" 4
.IX Item "ubirename"
ubirename \s-1UBI_DEVICE OLD_VOLNAME NEW_VOLNAME\s0 [\s-1OLD2 NEW2\s0]...
.Sp
Rename \s-1UBI\s0 volumes on \s-1UBI_DEVICE\s0
.IP "\fBubirmvol\fR" 4
.IX Item "ubirmvol"
ubirmvol \-n \s-1VOLID / \-N VOLNAME UBI_DEVICE\s0
.Sp
Remove \s-1UBI\s0 volume
.Sp
.Vb 2
\&        \-n VOLID        Volume ID
\&        \-N VOLNAME      Volume name
.Ve
.IP "\fBubirsvol\fR" 4
.IX Item "ubirsvol"
ubirsvol \-n \s-1VOLID\s0 \-s \s-1SIZE UBI_DEVICE\s0
.Sp
Resize \s-1UBI\s0 volume
.Sp
.Vb 2
\&        \-n VOLID        Volume ID
\&        \-s SIZE         Size in bytes
.Ve
.IP "\fBubiupdatevol\fR" 4
.IX Item "ubiupdatevol"
ubiupdatevol [\-t | [\-s \s-1SIZE\s0] \s-1IMG_FILE\s0] \s-1UBI_DEVICE\s0
.Sp
Update \s-1UBI\s0 volume
.Sp
.Vb 2
\&        \-t      Truncate to zero size
\&        \-s SIZE Size in bytes to resize to
.Ve
.IP "\fBudhcpc\fR" 4
.IX Item "udhcpc"
udhcpc [\-fbqvRB] [\-a[\s-1MSEC\s0]] [\-t N] [\-T \s-1SEC\s0] [\-A SEC/\-n]
	[\-i \s-1IFACE\s0] [\-s \s-1PROG\s0] [\-p \s-1PIDFILE\s0]
	[\-oC] [\-r \s-1IP\s0] [\-V \s-1VENDOR\s0] [\-F \s-1NAME\s0] [\-x \s-1OPT:VAL\s0]... [\-O \s-1OPT\s0]...
.Sp
.Vb 10
\&        \-i,\-\-interface IFACE    Interface to use (default eth0)
\&        \-s,\-\-script PROG        Run PROG at DHCP events (default /usr/share/udhcpc/default.script)
\&        \-p,\-\-pidfile FILE       Create pidfile
\&        \-B,\-\-broadcast          Request broadcast replies
\&        \-t,\-\-retries N          Send up to N discover packets (default 3)
\&        \-T,\-\-timeout SEC        Pause between packets (default 3)
\&        \-A,\-\-tryagain SEC       Wait if lease is not obtained (default 20)
\&        \-n,\-\-now                Exit if lease is not obtained
\&        \-q,\-\-quit               Exit after obtaining lease
\&        \-R,\-\-release            Release IP on exit
\&        \-f,\-\-foreground         Run in foreground
\&        \-b,\-\-background         Background if lease is not obtained
\&        \-S,\-\-syslog             Log to syslog too
\&        \-a[MSEC],\-\-arping[=MSEC] Validate offered address with ARP ping
\&        \-r,\-\-request IP         Request this IP address
\&        \-o,\-\-no\-default\-options Don\*(Aqt request any options (unless \-O is given)
\&        \-O,\-\-request\-option OPT Request option OPT from server (cumulative)
\&        \-x OPT:VAL              Include option OPT in sent packets (cumulative)
\&                                Examples of string, numeric, and hex byte opts:
\&                                \-x hostname:bbox \- option 12
\&                                \-x lease:3600 \- option 51 (lease time)
\&                                \-x 0x3d:0100BEEFC0FFEE \- option 61 (client id)
\&        \-F,\-\-fqdn NAME          Ask server to update DNS mapping for NAME
\&        \-V,\-\-vendorclass VENDOR Vendor identifier (default \*(Aqudhcp VERSION\*(Aq)
\&        \-C,\-\-clientid\-none      Don\*(Aqt send MAC as client identifier
\&        \-v                      Verbose
\&Signals:
\&
\&        USR1    Renew lease
\&        USR2    Release lease
.Ve
.IP "\fBudhcpd\fR" 4
.IX Item "udhcpd"
udhcpd [\-fS] [\-I \s-1ADDR\s0] [\s-1CONFFILE\s0]
.Sp
\&\s-1DHCP\s0 server
.Sp
.Vb 4
\&        \-f      Run in foreground
\&        \-S      Log to syslog too
\&        \-I ADDR Local address
\&        \-a MSEC Timeout for ARP ping (default 2000)
.Ve
.IP "\fBudpsvd\fR" 4
.IX Item "udpsvd"
udpsvd [\-hEv] [\-c N] [\-u \s-1USER\s0] [\-l \s-1NAME\s0] \s-1IP PORT PROG\s0
.Sp
Create \s-1UDP\s0 socket, bind to \s-1IP:PORT\s0 and wait for incoming packets.
Run \s-1PROG\s0 for each packet, redirecting all further packets with same
peer ip:port to it.
.Sp
.Vb 8
\&        IP PORT         IP:PORT to listen on
\&        PROG ARGS       Program to run
\&        \-u USER[:GRP]   Change to user/group after bind
\&        \-c N            Up to N connections simultaneously (default 30)
\&        \-E              Don\*(Aqt set up environment
\&        \-h              Look up peer\*(Aqs hostname
\&        \-l NAME         Local hostname (else look up local hostname in DNS)
\&        \-v              Verbose
.Ve
.Sp
Environment if no \-E:
PROTO='\s-1UDP\s0'
UDPREMOTEADDR='ip:port'
UDPLOCALADDR='ip:port'
If \-h:
UDPLOCALHOST='hostname' (\-l \s-1NAME\s0 is used if specified)
UDPREMOTEHOST='hostname'
.IP "\fBuevent\fR" 4
.IX Item "uevent"
uevent [\s-1PROG\s0 [\s-1ARGS\s0]]
.Sp
uevent runs \s-1PROG\s0 for every netlink notification.
\&\s-1PROG\s0's environment contains data passed from the kernel.
Typical usage (daemon for dynamic device node creation):
	# uevent mdev & mdev \-s
.IP "\fBumount\fR" 4
.IX Item "umount"
umount [\s-1OPTIONS\s0] FILESYSTEM|DIRECTORY
.Sp
Unmount file systems
.Sp
.Vb 5
\&        \-a      Unmount all file systems
\&        \-r      Try to remount devices as read\-only if mount is busy
\&        \-l      Lazy umount (detach filesystem)
\&        \-f      Force umount (i.e., unreachable NFS server)
\&        \-d      Free loop device if it has been used
.Ve
.IP "\fBuname\fR" 4
.IX Item "uname"
uname [\-amnrspvio]
.Sp
Print system information
.Sp
.Vb 9
\&        \-a      Print all
\&        \-m      The machine (hardware) type
\&        \-n      Hostname
\&        \-r      Kernel release
\&        \-s      Kernel name (default)
\&        \-p      Processor type
\&        \-v      Kernel version
\&        \-i      The hardware platform
\&        \-o      OS name
.Ve
.IP "\fBunexpand\fR" 4
.IX Item "unexpand"
unexpand [\-fa][\-t N] [\s-1FILE\s0]...
.Sp
Convert spaces to tabs, writing to stdout
.Sp
.Vb 3
\&        \-a,\-\-all        Convert all blanks
\&        \-f,\-\-first\-only Convert only leading blanks
\&        \-t,\-\-tabs N     Tabstops every N chars
.Ve
.IP "\fBuniq\fR" 4
.IX Item "uniq"
uniq [\-cdu][\-f,s,w N] [\s-1INPUT\s0 [\s-1OUTPUT\s0]]
.Sp
Discard duplicate lines
.Sp
.Vb 7
\&        \-c      Prefix lines by the number of occurrences
\&        \-d      Only print duplicate lines
\&        \-u      Only print unique lines
\&        \-i      Ignore case
\&        \-f N    Skip first N fields
\&        \-s N    Skip first N chars (after any skipped fields)
\&        \-w N    Compare N characters in line
.Ve
.IP "\fBunlink\fR" 4
.IX Item "unlink"
unlink \s-1FILE\s0
.Sp
Delete \s-1FILE\s0 by calling \fIunlink()\fR
.IP "\fBunshare\fR" 4
.IX Item "unshare"
unshare [\s-1OPTIONS\s0] [\s-1PROG\s0 [\s-1ARGS\s0]]
.Sp
.Vb 12
\&        \-m,\-\-mount[=FILE]       Unshare mount namespace
\&        \-u,\-\-uts[=FILE]         Unshare UTS namespace (hostname etc.)
\&        \-i,\-\-ipc[=FILE]         Unshare System V IPC namespace
\&        \-n,\-\-net[=FILE]         Unshare network namespace
\&        \-p,\-\-pid[=FILE]         Unshare PID namespace
\&        \-U,\-\-user[=FILE]        Unshare user namespace
\&        \-f,\-\-fork               Fork before execing PROG
\&        \-r,\-\-map\-root\-user      Map current user to root (implies \-U)
\&        \-\-mount\-proc[=DIR]      Mount /proc filesystem first (implies \-m)
\&        \-\-propagation slave|shared|private|unchanged
\&                                Modify mount propagation in mount namespace
\&        \-\-setgroups allow|deny  Control the setgroups syscall in user namespaces
.Ve
.IP "\fBuptime\fR" 4
.IX Item "uptime"
uptime
.Sp
Display the time since the last boot
.IP "\fBusleep\fR" 4
.IX Item "usleep"
usleep N
.Sp
Pause for N microseconds
.IP "\fBuudecode\fR" 4
.IX Item "uudecode"
uudecode [\-o \s-1OUTFILE\s0] [\s-1INFILE\s0]
.Sp
Uudecode a file
Finds \s-1OUTFILE\s0 in uuencoded source unless \-o is given
.IP "\fBuuencode\fR" 4
.IX Item "uuencode"
uuencode [\-m] [\s-1FILE\s0] \s-1STORED_FILENAME\s0
.Sp
Uuencode \s-1FILE \s0(or stdin) to stdout
.Sp
.Vb 1
\&        \-m      Use base64 encoding per RFC1521
.Ve
.IP "\fBvconfig\fR" 4
.IX Item "vconfig"
vconfig \s-1COMMAND\s0 [\s-1OPTIONS\s0]
.Sp
Create and remove virtual ethernet devices
.Sp
.Vb 6
\&        add             IFACE VLAN_ID
\&        rem             VLAN_NAME
\&        set_flag        IFACE 0|1 VLAN_QOS
\&        set_egress_map  VLAN_NAME SKB_PRIO VLAN_QOS
\&        set_ingress_map VLAN_NAME SKB_PRIO VLAN_QOS
\&        set_name_type   NAME_TYPE
.Ve
.IP "\fBvi\fR" 4
.IX Item "vi"
vi [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Edit \s-1FILE\s0
.Sp
.Vb 3
\&        \-c CMD  Initial command to run ($EXINIT also available)
\&        \-R      Read\-only
\&        \-H      List available features
.Ve
.IP "\fBvolname\fR" 4
.IX Item "volname"
volname [\s-1DEVICE\s0]
.Sp
Show \s-1CD\s0 volume name of the \s-1DEVICE \s0(default /dev/cdrom)
.IP "\fBwatchdog\fR" 4
.IX Item "watchdog"
watchdog [\-t N[ms]] [\-T N[ms]] [\-F] \s-1DEV\s0
.Sp
Periodically write to watchdog device \s-1DEV\s0
.Sp
.Vb 3
\&        \-T N    Reboot after N seconds if not reset (default 60)
\&        \-t N    Reset every N seconds (default 30)
\&        \-F      Run in foreground
.Ve
.Sp
Use 500ms to specify period in milliseconds
.IP "\fBwc\fR" 4
.IX Item "wc"
wc [\-clwL] [\s-1FILE\s0]...
.Sp
Count lines, words, and bytes for each \s-1FILE \s0(or stdin)
.Sp
.Vb 4
\&        \-c      Count bytes
\&        \-l      Count newlines
\&        \-w      Count words
\&        \-L      Print longest line length
.Ve
.IP "\fBxxd\fR" 4
.IX Item "xxd"
xxd [\s-1OPTIONS\s0] [\s-1FILE\s0]
.Sp
Hex dump \s-1FILE \s0(or stdin)
.Sp
.Vb 5
\&        \-g N            Bytes per group
\&        \-c N            Bytes per line
\&        \-p              Show only hex bytes, assumes \-c30
\&        \-l LENGTH       Show only first LENGTH bytes
\&        \-s OFFSET       Skip OFFSET bytes
.Ve
.IP "\fBzcip\fR" 4
.IX Item "zcip"
zcip [\s-1OPTIONS\s0] \s-1IFACE SCRIPT\s0
.Sp
Manage a ZeroConf IPv4 link-local address
.Sp
.Vb 5
\&        \-f              Run in foreground
\&        \-q              Quit after obtaining address
\&        \-r 169.254.x.x  Request this address first
\&        \-l x.x.0.0      Use this range instead of 169.254
\&        \-v              Verbose
.Ve
.Sp
\&\f(CW$LOGGING\fR=none		Suppress logging
\&\f(CW$LOGGING\fR=syslog 	Log to syslog
.Sp
With no \-q, runs continuously monitoring for \s-1ARP\s0 conflicts,
exits only on I/O errors (link down etc)
.SH "LIBC NSS"
.IX Header "LIBC NSS"
\&\s-1GNU\s0 Libc (glibc) uses the Name Service Switch (\s-1NSS\s0) to configure the behavior
of the C library for the local environment, and to configure how it reads
system data, such as passwords and group information.  This is implemented
using an /etc/nsswitch.conf configuration file, and using one or more of the
/lib/libnss_* libraries.  BusyBox tries to avoid using any libc calls that make
use of \s-1NSS. \s0 Some applets however, such as login and su, will use libc functions
that require \s-1NSS.\s0
.PP
If you enable \s-1CONFIG_USE_BB_PWD_GRP,\s0 BusyBox will use internal functions to
directly access the /etc/passwd, /etc/group, and /etc/shadow files without
using \s-1NSS. \s0 This may allow you to run your system without the need for
installing any of the \s-1NSS\s0 configuration files and libraries.
.PP
When used with glibc, the BusyBox 'networking' applets will similarly require
that you install at least some of the glibc \s-1NSS\s0 stuff (in particular,
/etc/nsswitch.conf, /lib/libnss_dns*, /lib/libnss_files*, and /lib/libresolv*).
.PP
Shameless Plug: As an alternative, one could use a C library such as uClibc.  In
addition to making your system significantly smaller, uClibc does not require the
use of any \s-1NSS\s0 support files or libraries.
.SH "MAINTAINER"
.IX Header "MAINTAINER"
Denis Vlasenko <vda.linux@googlemail.com>
.SH "AUTHORS"
.IX Header "AUTHORS"
The following people have contributed code to BusyBox whether they know it or
not.  If you have written code included in BusyBox, you should probably be
listed here so you can obtain your bit of eternal glory.  If you should be
listed here, or the description of what you have done needs more detail, or is
incorrect, please send in an update.
.PP
Emanuele Aina <emanuele.aina@tiscali.it>
    run-parts
.PP
Erik Andersen <andersen@codepoet.org>
.PP
.Vb 4
\&    Tons of new stuff, major rewrite of most of the
\&    core apps, tons of new apps as noted in header files.
\&    Lots of tedious effort writing these boring docs that
\&    nobody is going to actually read.
.Ve
.PP
Laurence Anderson <l.d.anderson@warwick.ac.uk>
.PP
.Vb 1
\&    rpm2cpio, unzip, get_header_cpio, read_gz interface, rpm
.Ve
.PP
Jeff Angielski <jeff@theptrgroup.com>
.PP
.Vb 1
\&    ftpput, ftpget
.Ve
.PP
Edward Betts <edward@debian.org>
.PP
.Vb 1
\&    expr, hostid, logname, whoami
.Ve
.PP
John Beppu <beppu@codepoet.org>
.PP
.Vb 1
\&    du, nslookup, sort
.Ve
.PP
Brian Candler <B.Candler@pobox.com>
.PP
.Vb 1
\&    tiny\-ls(ls)
.Ve
.PP
Randolph Chung <tausq@debian.org>
.PP
.Vb 1
\&    fbset, ping, hostname
.Ve
.PP
Dave Cinege <dcinege@psychosis.com>
.PP
.Vb 2
\&    more(v2), makedevs, dutmp, modularization, auto links file,
\&    various fixes, Linux Router Project maintenance
.Ve
.PP
Jordan Crouse <jordan@cosmicpenguin.net>
.PP
.Vb 1
\&    ipcalc
.Ve
.PP
Magnus Damm <damm@opensource.se>
.PP
.Vb 1
\&    tftp client insmod powerpc support
.Ve
.PP
Larry Doolittle <ldoolitt@recycle.lbl.gov>
.PP
.Vb 1
\&    pristine source directory compilation, lots of patches and fixes.
.Ve
.PP
Glenn Engel <glenne@engel.org>
.PP
.Vb 1
\&    httpd
.Ve
.PP
Gennady Feldman <gfeldman@gena01.com>
.PP
.Vb 2
\&    Sysklogd (single threaded syslogd, IPC Circular buffer support,
\&    logread), various fixes.
.Ve
.PP
Karl M. Hegbloom <karlheg@debian.org>
.PP
.Vb 1
\&    cp_mv.c, the test suite, various fixes to utility.c, &c.
.Ve
.PP
Daniel Jacobowitz <dan@debian.org>
.PP
.Vb 1
\&    mktemp.c
.Ve
.PP
Matt Kraai <kraai@alumni.cmu.edu>
.PP
.Vb 1
\&    documentation, bugfixes, test suite
.Ve
.PP
Stephan Linz <linz@li\-pro.net>
.PP
.Vb 1
\&    ipcalc, Red Hat equivalence
.Ve
.PP
John Lombardo <john@deltanet.com>
.PP
.Vb 1
\&    tr
.Ve
.PP
Glenn McGrath <bug1@iinet.net.au>
.PP
.Vb 3
\&    Common unarchiving code and unarchiving applets, ifupdown, ftpgetput,
\&    nameif, sed, patch, fold, install, uudecode.
\&    Various bugfixes, review and apply numerous patches.
.Ve
.PP
Manuel Novoa \s-1III\s0 <mjn3@codepoet.org>
.PP
.Vb 3
\&    cat, head, mkfifo, mknod, rmdir, sleep, tee, tty, uniq, usleep, wc, yes,
\&    mesg, vconfig, make_directory, parse_mode, dirname, mode_string,
\&    get_last_path_component, simplify_path, and a number trivial libbb routines
\&
\&    also bug fixes, partial rewrites, and size optimizations in
\&    ash, basename, cal, cmp, cp, df, du, echo, env, ln, logname, md5sum, mkdir,
\&    mv, realpath, rm, sort, tail, touch, uname, watch, arith, human_readable,
\&    interface, dutmp, ifconfig, route
.Ve
.PP
Vladimir Oleynik <dzo@simtreas.ru>
.PP
.Vb 4
\&    cmdedit; xargs(current), httpd(current);
\&    ports: ash, crond, fdisk, inetd, stty, traceroute, top;
\&    locale, various fixes
\&    and irreconcilable critic of everything not perfect.
.Ve
.PP
Bruce Perens <bruce@pixar.com>
.PP
.Vb 2
\&    Original author of BusyBox in 1995, 1996. Some of his code can
\&    still be found hiding here and there...
.Ve
.PP
Tim Riker <Tim@Rikers.org>
.PP
.Vb 1
\&    bug fixes, member of fan club
.Ve
.PP
Kent Robotti <robotti@metconnect.com>
.PP
.Vb 1
\&    reset, tons and tons of bug reports and patches.
.Ve
.PP
Chip Rosenthal <chip@unicom.com>, <crosenth@covad.com>
.PP
.Vb 1
\&    wget \- Contributed by permission of Covad Communications
.Ve
.PP
Pavel Roskin <proski@gnu.org>
.PP
.Vb 1
\&    Lots of bugs fixes and patches.
.Ve
.PP
Gyepi Sam <gyepi@praxis\-sw.com>
.PP
.Vb 1
\&    Remote logging feature for syslogd
.Ve
.PP
Linus Torvalds <torvalds@transmeta.com>
.PP
.Vb 1
\&    mkswap, fsck.minix, mkfs.minix
.Ve
.PP
Mark Whitley <markw@codepoet.org>
.PP
.Vb 2
\&    grep, sed, cut, xargs(previous),
\&    style\-guide, new\-applet\-HOWTO, bug fixes, etc.
.Ve
.PP
Charles P. Wright <cpwright@villagenet.com>
.PP
.Vb 1
\&    gzip, mini\-netcat(nc)
.Ve
.PP
Enrique Zanardi <ezanardi@ull.es>
.PP
.Vb 1
\&    tarcat (since removed), loadkmap, various fixes, Debian maintenance
.Ve
.PP
Tito Ragusa <farmatito@tiscali.it>
.PP
.Vb 1
\&    devfsd and size optimizations in strings, openvt and deallocvt.
.Ve
.PP
Paul Fox <pgf@foxharp.boston.ma.us>
.PP
.Vb 1
\&    vi editing mode for ash, various other patches/fixes
.Ve
.PP
Roberto A. Foglietta <me@roberto.foglietta.name>
.PP
.Vb 1
\&    port: dnsd
.Ve
.PP
Bernhard Reutner-Fischer <rep.dot.nop@gmail.com>
.PP
.Vb 1
\&    misc
.Ve
.PP
Mike Frysinger <vapier@gentoo.org>
.PP
.Vb 1
\&    initial e2fsprogs, printenv, setarch, sum, misc
.Ve
.PP
Jie Zhang <jie.zhang@analog.com>
.PP
.Vb 1
\&    fixed two bugs in msh and hush (exitcode of killed processes)
.Ve
